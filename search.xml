<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础知识（二）</title>
      <link href="/2021/12/31/MySQLBasics2/"/>
      <url>/2021/12/31/MySQLBasics2/</url>
      
        <content type="html"><![CDATA[<h2 id="3-DML语言"><a href="#3-DML语言" class="headerlink" title="3. DML语言"></a>3. DML语言</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>数据操作语言：<br>插入：insert<br>修改：update<br>删除：delete</p><h3 id="3-2-插入"><a href="#3-2-插入" class="headerlink" title="3.2 插入"></a>3.2 插入</h3><p><strong>1. 方式一</strong><br>    语法：insert into 表名(字段名,…) values(值,…);<br><strong>特点：</strong></p><ol><li>要求值的类型和字段的类型要一致或兼容</li><li>字段的个数和顺序不一定与原始表中的字段个数和顺序一致<br>但必须保证值和字段一一对应</li><li>假如表中有可以为null的字段，注意可以通过以下两种方式插入null值<ul><li>字段和值都省略</li><li>字段写上，值使用null</li></ul></li><li>字段和值的个数必须一致</li><li>字段名可以省略，默认所有列</li></ol><p><strong>2. 方式二</strong><br>语法：insert into 表名 set 字段=值,字段=值,…;<br><strong>3. 两种方式 的区别：</strong></p><ol><li>方式一支持一次插入多行，语法如下：<br>insert into 表名【(字段名,..)】 values(值，..),(值，…),…;</li><li>方式一支持子查询，语法如下：<br>insert into 表名</li></ol><pre class=" language-MySQL"><code class="language-MySQL">#方式一：经典的插入/*语法：insert into 表名(列名,...) values(值1,...);*/#1.插入的值的类型要与列的类型一致或兼容INSERT INTO beauty ( id, NAME, sex, borndate, phone, photo, boyfriend_id )VALUES    ( 13, '唐艺昕', '女', '1990-4-23', '1898888888', NULL, 2 );        #2.不可以为null的列必须插入值。可以为null的列如何插入值？#方式一：INSERT INTO beauty ( id, NAME, sex, borndate, phone, photo, boyfriend_id )VALUES    ( 13, '唐艺昕', '女', '1990-4-23', '1898888888', NULL, 2 );#方式二：INSERT INTO beauty ( id, NAME, sex, phone )VALUES    ( 15, '娜扎', '女', '1388888888' );#3.列的顺序是否可以调换INSERT INTO beauty ( NAME, sex, id, phone )VALUES    ( '蒋欣', '女', 16, '110' );#4.列数和值的个数必须一致INSERT INTO beauty ( NAME, sex, id, phone )VALUES    ( '关晓彤', '女', 17, '110' );#5.可以省略列名，默认所有列，而且列的顺序和表中列的顺序一致INSERT INTO beautyVALUES    ( 18, '张飞', '男', NULL, '119', NULL, NULL );#方式二：/*语法：insert into 表名 set 列名=值,列名=值,...*/INSERT INTO beauty SET id = 19,NAME = '刘涛',phone = '999';#两种方式大pk ★#1、方式一支持插入多行,方式二不支持INSERT INTO beautyVALUES    ( 23, '唐艺昕1', '女', '1990-4-23', '1898888888', NULL, 2 ),    ( 24, '唐艺昕2', '女', '1990-4-23', '1898888888', NULL, 2 ),    ( 25, '唐艺昕3', '女', '1990-4-23', '1898888888', NULL, 2 );#2、方式一支持子查询，方式二不支持INSERT INTO beauty ( id, NAME, phone ) SELECT26,'宋茜','11809866';INSERT INTO beauty ( id, NAME, phone ) SELECTid,boyname,'1234567' FROM    boys WHERE    id < 3;</code></pre><h3 id="3-2-修改"><a href="#3-2-修改" class="headerlink" title="3.2 修改"></a>3.2 修改</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><ol><li><p>修改单表的记录★<br> <strong>语法</strong>：<br> update 表名<br> set 列=新值,列=新值,…<br> where 筛选条件;</p></li><li><p>修改多表的记录【补充】<br> <strong>语法：</strong><br> <strong>sql92语法：</strong><br> update 表1 别名,表2 别名<br> set 列=值,…<br> where 连接条件<br> and 筛选条件;</p><p> <strong>sql99语法：</strong><br> update 表1 别名<br> inner|left|right join 表2 别名<br> on 连接条件<br> set 列=值,…<br> where 筛选条件;</p></li></ol><pre class=" language-MySQL"><code class="language-MySQL">#1.修改单表的记录#案例1：修改beauty表中姓唐的女神的电话为13899888899UPDATE beauty SET phone = '13899888899' WHERE    NAME LIKE '唐%';#案例2：修改boys表中id好为2的名称为张飞，魅力值 10UPDATE boys SET boyname = '张飞',usercp = 10 WHERE    id = 2;#2.修改多表的记录#案例 1：修改张无忌的女朋友的手机号为114UPDATE boys boINNER JOIN beauty b ON bo.`id` = b.`boyfriend_id` SET b.`phone` = '114',bo.`userCP` = 1000 WHERE    bo.`boyName` = '张无忌';#案例2：修改没有男朋友的女神的男朋友编号都为2号UPDATE boys boRIGHT JOIN beauty b ON bo.`id` = b.`boyfriend_id` SET b.`boyfriend_id` = 2 WHERE    bo.`id` IS NULL;</code></pre><h3 id="3-3-删除"><a href="#3-3-删除" class="headerlink" title="3.3 删除"></a>3.3 删除</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h4><p>方式一：delete<br>式二：truncate语句<br><strong>语法：</strong></p><ol><li>单表的删除【★】<br>delete from 表名 where 筛选条件</li><li>多表的删除【补充】<br> <strong>sql92语法：</strong><br> delete 表1的别名,表2的别名<br> from 表1 别名,表2 别名<br> where 连接条件<br> and 筛选条件;</li></ol><p><strong>sql99语法：</strong><br>delete 表1的别名,表2的别名<br>from 表1 别名<br>inner|left|right join 表2 别名 on 连接条件<br>where 筛选条件;</p><p><strong>方式一  delete</strong></p><pre class=" language-MySQL"><code class="language-MySQL">#1.单表的删除#案例：删除手机号以9结尾的女神信息DELETE FROM    beauty WHERE    phone LIKE '%9';SELECT    * FROM    beauty;</code></pre><pre class=" language-MySQL"><code class="language-MySQL">#2.多表的删除#案例：删除张无忌的女朋友的信息DELETE b FROM    beauty b    INNER JOIN boys bo ON b.`boyfriend_id` = bo.`id` WHERE    bo.`boyName` = '张无忌';#案例：删除黄晓明的信息以及他女朋友的信息DELETE b,bo FROM    beauty b    INNER JOIN boys bo ON b.`boyfriend_id` = bo.`id` WHERE    bo.`boyName` = '黄晓明';</code></pre><p><strong>方式二：truncate语句</strong></p><pre class=" language-MySQL"><code class="language-MySQL">#案例：将魅力值>100的男神信息删除TRUNCATE TABLE boys ;</code></pre><p><strong>delete pk truncate</strong></p><ol><li>delete 可以加where 条件，truncate不能加</li><li>truncate删除，效率高一丢丢</li><li>假如要删除的表中有自增长列，<br>如果用delete删除后，再插入数据，自增长列的值从断点开始，<br>而truncate删除后，再插入数据，自增长列的值从1开始。</li><li>truncate删除没有返回值，delete删除有返回值</li><li>truncate删除不能回滚，delete删除可以回滚.</li></ol><h2 id="4-DDL语言"><a href="#4-DDL语言" class="headerlink" title="4. DDL语言"></a>4. DDL语言</h2><h3 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h3><ol><li>数据定义语言</li><li>库和表的管理</li><li>库的管理<br> 创建、修改、删除</li><li>表的管理<br> 创建、修改、删除</li><li>创建： create<br> 修改： alter<br> 删除： drop</li></ol><h3 id="4-2-库的管理"><a href="#4-2-库的管理" class="headerlink" title="4.2 库的管理"></a>4.2 库的管理</h3><p><strong>库的创建</strong>：create database  （if not exists）库名;</p><pre class=" language-mysql"><code class="language-mysql">#案例：创建库BooksCREATE DATABASEIF    NOT EXISTS books;</code></pre><p><strong>库的修改</strong></p><pre class=" language-mysql"><code class="language-mysql">#2、库的修改RENAME DATABASE books TO 新库名;#更改库的字符集ALTER DATABASE books CHARACTER SET gbk;</code></pre><p><strong>库的删除</strong></p><pre class=" language-mysql"><code class="language-mysql">DROP DATABASEIF    EXISTS books;</code></pre><h3 id="4-3-表的管理"><a href="#4-3-表的管理" class="headerlink" title="4.3 表的管理"></a>4.3 表的管理</h3><p><strong>表的创建</strong><br><strong>语法：</strong><br>create table 表名(<br>    列名 列的类型【(长度) 约束】,<br>    列名 列的类型【(长度) 约束】,<br>    列名 列的类型【(长度) 约束】,<br>    …<br>    列名 列的类型【(长度) 约束】<br>)</p><pre class=" language-mysql"><code class="language-mysql">#案例：创建表BookCREATE TABLE book ( id INT, #编号bName VARCHAR ( 20 ), #图书名price DOUBLE, #价格authorId INT, #作者编号publishDate DATETIME #出版日期);#查看表的结构DESC book;#案例：创建表authorCREATE TABLEIF    NOT EXISTS author ( id INT, au_name VARCHAR ( 20 ), nation VARCHAR ( 10 ) );</code></pre><p><strong>表的修改</strong><br><strong>语法</strong>：alter table 表名 add|drop|modify|change column 列名 【列类型 约束】;</p><pre class=" language-mysql"><code class="language-mysql">#①修改列名ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME;#②修改列的类型或约束ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP;#③添加新列ALTER TABLE author ADD COLUMN annual DOUBLE; #④删除列ALTER TABLE book_author DROP COLUMN  annual;#⑤修改表名ALTER TABLE author RENAME TO book_author;</code></pre><p><strong>表的删除</strong></p><pre class=" language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS book_author;SHOW TABLES;#通用的写法：DROP DATABASE IF EXISTS 旧库名;CREATE DATABASE 新库名;DROP TABLE IF EXISTS 旧表名;CREATE TABLE  表名;</code></pre><p><strong>表的创建</strong></p><pre class=" language-mysql"><code class="language-mysql">#1.仅仅复制表的结构CREATE TABLE copy LIKE author;#2.复制表的结构+数据CREATE TABLE copy2 SELECT * FROM author;#只复制部分数据CREATE TABLE copy3SELECT id,au_nameFROM author WHERE nation='中国';#仅仅复制某些字段CREATE TABLE copy4 SELECT idFROM author</code></pre><h3 id="4-3-数据类型"><a href="#4-3-数据类型" class="headerlink" title="4.3 数据类型"></a>4.3 数据类型</h3><h4 id="4-3-1-数值型"><a href="#4-3-1-数值型" class="headerlink" title="4.3.1 数值型"></a>4.3.1 数值型</h4><ol><li><p>整型<br> tinyint、smallint、mediumint、int/integer、bigint<br> 1           2              3                  4                  8</p><p> 特点：</p><ul><li>都可以设置无符号和有符号，默认有符号，通过unsigned设置无符号</li><li>如果超出了范围，会报out or range异常，插入临界值</li><li>长度可以不指定，默认会有一个长度</li><li>长度代表显示的最大宽度，如果不够则左边用0填充，但需要搭配zerofill，并且默认变为无符号整型</li></ul></li><li><p>浮点型<br> 定点数：decimal(M,D)<br> 浮点数:<br>float(M,D)   4<br>double(M,D)  8</p><p> 特点：</p><ul><li>M代表整数部位+小数部位的个数，D代表小数部位</li><li>如果超出范围，则报out or range异常，并且插入临界值</li><li>M和D都可以省略，但对于定点数，M默认为10，D默认为0</li><li>如果精度要求较高，则优先考虑使用定点数</li></ul></li></ol><h4 id="4-3-2-字符型"><a href="#4-3-2-字符型" class="headerlink" title="4.3.2 字符型"></a>4.3.2 字符型</h4><p>   char、varchar、binary、varbinary、enum、set、text、blob</p><p>   char：固定长度的字符，写法为char(M)，最大长度不能超过M，其中M可以省略，默认为1<br>   varchar：可变长度的字符，写法为varchar(M)，最大长度不能超过M，其中M不可以省略</p><h4 id="4-3-1-日期型"><a href="#4-3-1-日期型" class="headerlink" title="4.3.1 日期型"></a>4.3.1 日期型</h4><p>year年<br>date日期<br>time时间<br>datetime 日期+时间          8<br>timestamp 日期+时间         4   比较容易受时区、语法模式、版本的影响，更能反映当前时区的真实时间</p><h3 id="4-4-常见的约束"><a href="#4-4-常见的约束" class="headerlink" title="4.4 常见的约束"></a>4.4 常见的约束</h3><h4 id="4-4-1-常见的约束"><a href="#4-4-1-常见的约束" class="headerlink" title="4.4.1 常见的约束"></a>4.4.1 常见的约束</h4><ul><li><p>NOT NULL：非空，该字段的值必填</p></li><li><p>UNIQUE：唯一，该字段的值不可重复</p></li><li><p>DEFAULT：默认，该字段的值不用手动插入有默认值</p></li><li><p>CHECK：检查，mysql不支持</p></li><li><p>PRIMARY KEY：主键，该字段的值不可重复并且非空  unique+not null</p></li><li><p>FOREIGN KEY：外键，该字段的值引用了另外的表的字段</p></li><li><p>主键和唯一<br>  <strong>1. 区别：</strong><br>  ①、一个表至多有一个主键，但可以有多个唯一<br>  ②、主键不允许为空，唯一可以为空<br>  <strong>2. 相同点</strong><br>  都具有唯一性<br>  都支持组合键，但不推荐</p></li><li><p>外键：</p><ol><li>用于限制两个表的关系，从表的字段值引用了主表的某字段值</li><li>外键列和主表的被引用列要求类型一致，意义一样，名称无要求</li><li>主表的被引用列要求是一个key（一般就是主键）</li><li>插入数据，先插入主表</li></ol></li><li><p>删除数据，先删除从表<br>  可以通过以下两种方式来删除主表的记录<br>  <strong>#方式一：级联删除</strong><br>  ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE CASCADE;</p><p>  <strong>#方式二：级联置空</strong><br>  ALTER TABLE stuinfo ADD CONSTRAINT fk_stu_major FOREIGN KEY(majorid) REFERENCES major(id) ON DELETE SET NULL;</p></li></ul><h4 id="4-4-2-创建表时添加约束"><a href="#4-4-2-创建表时添加约束" class="headerlink" title="4.4.2 创建表时添加约束"></a>4.4.2 创建表时添加约束</h4><p>create table 表名(<br>    字段名 字段类型 not null,#非空<br>    字段名 字段类型 primary key,#主键<br>    字段名 字段类型 unique,#唯一<br>    字段名 字段类型 default 值,#默认<br>    constraint 约束名 foreign key(字段名) references 主表（被引用列）<br>)<br><strong>注意：</strong></p><table><thead><tr><th></th><th>支持类型</th><th>可以起约束名</th></tr></thead><tbody><tr><td>列级约束</td><td>除了外键</td><td>不可以</td></tr><tr><td>表级约束</td><td>除了非空和默认</td><td>可以，但对主键无效</td></tr></tbody></table><p>列级约束可以在一个字段上追加多个，中间用空格隔开，没有顺序要求</p><pre class=" language-MySQL"><code class="language-MySQL">#1.添加列级约束/*语法：直接在字段名和类型后面追加 约束类型即可。只支持：默认、非空、主键、唯一*/CREATE TABLE stuinfo (id INT PRIMARY KEY,#主键stuName VARCHAR ( 20 ) NOT NULL UNIQUE,#非空gender CHAR ( 1 ) CHECK ( gender = '男' OR gender = '女' ),#检查seat INT UNIQUE,#唯一age INT DEFAULT 18,#默认约束majorId INT REFERENCES major ( id ) #外键);CREATE TABLE major ( id INT PRIMARY KEY, majorName VARCHAR ( 20 ) );#查看stuinfo中的所有索引，包括主键、外键、唯一SHOW INDEX FROM stuinfo;#2.添加表级约束/*语法：在各个字段的最下面 【constraint 约束名】 约束类型(字段名) */CREATE TABLEIF    NOT EXISTS stuinfo (    id INT PRIMARY KEY,    stuname VARCHAR ( 20 ),    sex CHAR ( 1 ),    age INT DEFAULT 18,    seat INT UNIQUE,    majorid INT,    CONSTRAINT fk_stuinfo_major FOREIGN KEY ( majorid ) REFERENCES major ( id )     );</code></pre><h4 id="4-4-3-修改表时添加或删除约束"><a href="#4-4-3-修改表时添加或删除约束" class="headerlink" title="4.4.3 修改表时添加或删除约束"></a>4.4.3 修改表时添加或删除约束</h4><p><strong>非空</strong><br>添加非空<br>alter table 表名 modify column 字段名 字段类型 not null;<br>删除非空<br>alter table 表名 modify column 字段名 字段类型 ;</p><pre class=" language-MySQL"><code class="language-MySQL">#1.添加非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20)  NOT NULL;#1.删除非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</code></pre><p><strong>默认</strong><br>添加默认<br>alter table 表名 modify column 字段名 字段类型 default 值;<br>删除默认<br>alter table 表名 modify column 字段名 字段类型 ;</p><pre class=" language-MySQL"><code class="language-MySQL">#2.添加默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;#2.删除默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT ;</code></pre><p><strong>主键</strong><br>添加主键<br>alter table 表名 add【 constraint 约束名】 primary key(字段名);<br>删除主键<br>alter table 表名 drop primary key;</p><pre class=" language-MySQL"><code class="language-MySQL">#3.添加主键#①列级约束ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;#②表级约束ALTER TABLE stuinfo ADD PRIMARY KEY(id);#3.删除主键ALTER TABLE stuinfo DROP PRIMARY KEY;</code></pre><p><strong>唯一</strong><br>添加唯一<br>alter table 表名 add【 constraint 约束名】 unique(字段名);<br>删除唯一<br>alter table 表名 drop index 索引名;</p><pre class=" language-MySQL"><code class="language-MySQL">#①列级约束ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;#②表级约束ALTER TABLE stuinfo ADD UNIQUE(seat);#4.删除唯一ALTER TABLE stuinfo DROP INDEX seat;</code></pre><p><strong>外键</strong><br>添加外键<br>alter table 表名 add【 constraint 约束名】 foreign key(字段名) references 主表（被引用列）;<br>删除外键<br>alter table 表名 drop foreign key 约束名;</p><pre class=" language-MySQL"><code class="language-MySQL">#5.添加外键ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id); #5.删除外键ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</code></pre><h4 id="4-4-4-自增长列"><a href="#4-4-4-自增长列" class="headerlink" title="4.4.4 自增长列"></a>4.4.4 自增长列</h4><p><strong>特点：</strong></p><ol><li>不用手动插入值，可以自动提供序列值，默认从1开始，步长为1<br> auto_increment_increment<br> 如果要更改起始值：手动插入值<br> 如果要更改步长：更改系统变量<br> set auto_increment_increment=值;</li><li>一个表至多有一个自增长列</li><li>自增长列只能支持数值型</li><li>自增长列必须为一个key</li></ol><p><strong>创建表时设置自增长列</strong></p><pre class=" language-mysql"><code class="language-mysql">create table 表(        字段名 字段类型 约束 auto_increment)</code></pre><p><strong>修改表时设置自增长列</strong></p><pre class=" language-mysql"><code class="language-mysql"> alter table 表 modify column 字段名 字段类型 约束 auto_increment</code></pre><p><strong>删除自增长列</strong></p><pre class=" language-mysql"><code class="language-mysql">alter table 表 modify column 字段名 字段类型 约束 </code></pre><h2 id="5-TCL语言"><a href="#5-TCL语言" class="headerlink" title="5. TCL语言"></a>5. TCL语言</h2><h4 id="5-1-1-事务"><a href="#5-1-1-事务" class="headerlink" title="5.1.1 事务"></a>5.1.1 事务</h4><ol><li><p>含义<br>事务：一条或多条sql语句组成一个执行单位，一组sql语句要么都执行要么都不执行</p></li><li><p>特点（ACID）<br> A 原子性：一个事务是不可再分割的整体，要么都执行要么都不执行<br> C 一致性：一个事务可以使数据从一个一致状态切换到另外一个一致的状态<br> I 隔离性：一个事务不受其他事务的干扰，多个事务互相隔离的<br> D 持久性：一个事务一旦提交了，则永久的持久化到本地</p><table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td></td></tr></tbody></table><p> mysql中默认 第三个隔离级别 repeatable read<br> oracle中默认第二个隔离级别 read committed<br> 查看隔离级别<br> select @@tx_isolation;<br> 设置隔离级别<br> set session|global transaction isolation level 隔离级别;</p></li></ol><h4 id="5-1-2-事务的使用步骤-★"><a href="#5-1-2-事务的使用步骤-★" class="headerlink" title="5.1.2 事务的使用步骤 ★"></a>5.1.2 事务的使用步骤 ★</h4><p>了解：<br>隐式（自动）事务：没有明显的开启和结束，本身就是一条事务可以自动提交，比如insert、update、delete<br>显式事务：具有明显的开启和结束</p><p>使用显式事务：<br>①开启事务<br>set autocommit=0;<br>start transaction;#可以省略</p><pre class=" language-MySQL"><code class="language-MySQL">SET autocommit = 0;START TRANSACTION;</code></pre><p>②编写一组逻辑sql语句<br>注意：sql语句支持的是insert、update、delete</p><pre class=" language-MySQL"><code class="language-MySQL">UPDATE account SET balance = 1000 WHERE    username = '张无忌';UPDATE account SET balance = 1000 WHERE    username = '赵敏';</code></pre><p>设置回滚点：<br>savepoint 回滚点名;</p><p>③结束事务<br>提交：commit;<br>回滚：rollback;<br>回滚到指定的地方：rollback to 回滚点名;</p><pre class=" language-MySQL"><code class="language-MySQL">ROLLBACK;</code></pre><pre class=" language-MySQL"><code class="language-MySQL">SHOW VARIABLES LIKE 'autocommit';SHOW ENGINES;#1.演示事务的使用步骤#开启事务SET autocommit = 0;START TRANSACTION;#编写一组事务的语句UPDATE account SET balance = 1000 WHERE    username = '张无忌';UPDATE account SET balance = 1000 WHERE    username = '赵敏';#结束事务ROLLBACK;#commit;</code></pre><p><strong>演示事务对于delete和truncate的处理的区别</strong></p><pre class=" language-MySQL"><code class="language-MySQL">#2.演示事务对于delete和truncate的处理的区别SET autocommit=0;START TRANSACTION;DELETE FROM account;ROLLBACK;</code></pre><p><strong>演示savepoint 的使用</strong></p><pre class=" language-MySQL"><code class="language-MySQL">#3.演示savepoint 的使用SET autocommit=0;START TRANSACTION;DELETE FROM account WHERE id=25;SAVEPOINT a;#设置保存点DELETE FROM account WHERE id=28;ROLLBACK TO a;#回滚到保存点</code></pre><h4 id="5-1-3-并发事务"><a href="#5-1-3-并发事务" class="headerlink" title="5.1.3 并发事务"></a>5.1.3 并发事务</h4><ol><li>事务的并发问题是如何发生的？<br> 多个事务 同时 操作 同一个数据库的相同数据时</li><li>并发问题都有哪些？<br>脏读：一个事务读取了其他事务还没有提交的数据，读到的是其他事务“更新”的数据<br>不可重复读：一个事务多次读取，结果不一样<br>幻读：一个事务读取了其他事务还没有提交的数据，只是读到的是 其他事务“插入”的 数据</li><li>如何解决并发问题<br> 通过设置隔离级别来解决并发问题</li><li>隔离级别<table><thead><tr><th></th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>×</td><td>×</td><td>×</td></tr><tr><td>read committed</td><td>√</td><td>×</td><td>×</td></tr><tr><td>repeatable read</td><td>√</td><td>√</td><td>×</td></tr><tr><td>serializable</td><td>√</td><td>√</td><td></td></tr></tbody></table></li></ol><h2 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h2><h3 id="6-1-视图"><a href="#6-1-视图" class="headerlink" title="6.1 视图"></a>6.1 视图</h3><h4 id="6-1-1-概述"><a href="#6-1-1-概述" class="headerlink" title="6.1.1 概述"></a>6.1.1 概述</h4><ol><li>含义<br> mysql5.1版本出现的新特性，本身是一个虚拟表，它的数据来自于表，通过执行时动态生成。</li><li>好处：<ul><li>简化sql语句</li><li>提高了sql的重用性</li><li>保护基表的数据，提高了安全性</li></ul></li></ol><h4 id="6-1-2-创建"><a href="#6-1-2-创建" class="headerlink" title="6.1.2 创建"></a>6.1.2 创建</h4><p>create view 视图名<br>as<br>查询语句;</p><pre class=" language-MySQL"><code class="language-MySQL">#1.查询姓名中包含a字符的员工名、部门名和工种信息#①创建CREATE VIEW myv1 AS SELECTlast_name,department_name,job_title FROM    employees e    JOIN departments d ON e.department_id = d.department_id    JOIN jobs j ON j.job_id = e.job_id;#②使用SELECT    * FROM    myv1 WHERE    last_name LIKE '%a%';#2.查询各部门的平均工资级别#①创建视图查看每个部门的平均工资CREATE VIEW myv2 AS SELECTAVG( salary ) ag,department_id FROM    employees GROUP BY    department_id;#②使用SELECT    myv2.`ag`,    g.grade_level FROM    myv2    JOIN job_grades g ON myv2.`ag` BETWEEN g.`lowest_sal`     AND g.`highest_sal`;#3.查询平均工资最低的部门信息SELECT    * FROM    myv2 ORDER BY    ag     LIMIT 1;#4.查询平均工资最低的部门名和工资CREATE VIEW myv3 AS SELECT* FROM    myv2 ORDER BY    ag     LIMIT 1;SELECT    d.*,    m.ag FROM    myv3 m    JOIN departments d ON m.`department_id` = d.`department_id`;</code></pre><h4 id="6-1-3-修改"><a href="#6-1-3-修改" class="headerlink" title="6.1.3 修改"></a>6.1.3 修改</h4><p><strong>方式一：</strong><br>create or replace view 视图名<br>as<br>查询语句;</p><pre class=" language-MySQL"><code class="language-MySQL">CREATE     OR REPLACE VIEW myv3 AS SELECT    AVG( salary ),    job_id FROM    employees GROUP BY    job_id;</code></pre><p><strong>方式二：</strong><br>alter view 视图名<br>as<br>查询语句</p><pre class=" language-MySQL"><code class="language-MySQL">ALTER VIEW myv3 AS SELECT* FROM    employees;</code></pre><h4 id="6-1-4-删除"><a href="#6-1-4-删除" class="headerlink" title="6.1.4 删除"></a>6.1.4 删除</h4><p>drop view 视图1，视图2,…;</p><pre class=" language-MySQL"><code class="language-MySQL">DROP VIEW emp_v1,emp_v2,myv3;</code></pre><h4 id="6-1-5-查看"><a href="#6-1-5-查看" class="headerlink" title="6.1.5 查看"></a>6.1.5 查看</h4><p>desc 视图名;<br>show create view 视图名;</p><pre class=" language-MySQL"><code class="language-MySQL">DESC myv3;SHOW CREATE VIEW myv3;</code></pre><h4 id="6-1-6-使用–视图更新"><a href="#6-1-6-使用–视图更新" class="headerlink" title="6.1.6 使用–视图更新"></a>6.1.6 使用–视图更新</h4><p><strong>插入</strong><br>insert</p><pre class=" language-MySQL"><code class="language-MySQL">INSERT INTO myv1VALUES    ( '张飞', 'zf@qq.com' );</code></pre><p><strong>修改</strong><br>update</p><pre class=" language-MySQL"><code class="language-MySQL">UPDATE myv1 SET last_name = '张无忌' WHERE    last_name = '张飞';</code></pre><p><strong>删除</strong><br>delete</p><pre class=" language-MySQL"><code class="language-MySQL">DELETE FROM    myv1 WHERE    last_name = '张无忌';</code></pre><p><strong>查看</strong><br>select<br><font color="#FF0000"><strong>注意：</strong></font>视图一般用于查询的，而不是更新的，所以具备以下特点的视图都不允许更新<br>①包含分组函数、group by、distinct、having、union、union all<br>②join<br>③常量视图<br>④where后的子查询用到了from中的表<br>⑤用到了不可更新的视图</p><h4 id="6-1-7-视图和表的对比"><a href="#6-1-7-视图和表的对比" class="headerlink" title="6.1.7 视图和表的对比"></a>6.1.7 视图和表的对比</h4><table><thead><tr><th></th><th>创建语法关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td>create view</td><td>只是保存了sql逻辑</td><td>增，删，查，改，只是一般不能增删改</td></tr><tr><td>表</td><td>create table</td><td>保存了数据</td><td></td></tr></tbody></table><h3 id="6-2-变量"><a href="#6-2-变量" class="headerlink" title="6.2 变量"></a>6.2 变量</h3><h4 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h4><p><strong>分类</strong><br>一、系统变量<br>说明：变量由系统提供的，不用自定义<br>语法：</p><ul><li>①查看系统变量<br>  show 【global|session 】variables like ‘’; 如果没有显式声明global还是session，则默认是session</li><li>②查看指定的系统变量的值<br>  select @@【global|session】.变量名; 如果没有显式声明global还是session，则默认是session</li></ul><ul><li>③为系统变量赋值<br>  方式一：<br>  set 【global|session 】 变量名=值; 如果没有显式声明global还是session，则默认是session<br>  方式二：<br>  set @@global.变量名=值;<br>  set @@变量名=值；</li></ul><h4 id="6-2-2-全局变量"><a href="#6-2-2-全局变量" class="headerlink" title="6.2.2 全局变量"></a>6.2.2 全局变量</h4><p>服务器层面上的，必须拥有super权限才能为系统变量赋值，作用域为整个服务器，也就是针对于所有连接（会话）有效</p><pre class=" language-MySQL"><code class="language-MySQL">#①查看所有全局变量SHOW GLOBAL VARIABLES;#②查看满足条件的部分系统变量SHOW GLOBAL VARIABLES LIKE '%char%';#③查看指定的系统变量的值SELECT @@global.autocommit;#④为某个系统变量赋值SET @@global.autocommit=0;SET GLOBAL autocommit=0;</code></pre><h4 id="6-2-3-会话变量"><a href="#6-2-3-会话变量" class="headerlink" title="6.2.3 会话变量"></a>6.2.3 会话变量</h4><p>服务器为每一个连接的客户端都提供了系统变量，作用域为当前的连接（会话）</p><pre class=" language-MySQL"><code class="language-MySQL">#①查看所有会话变量SHOW SESSION VARIABLES;#②查看满足条件的部分会话变量SHOW SESSION VARIABLES LIKE '%char%';#③查看指定的会话变量的值SELECT @@autocommit;SELECT @@session.tx_isolation;#④为某个会话变量赋值SET @@session.tx_isolation='read-uncommitted';SET SESSION tx_isolation='read-committed';</code></pre><h4 id="6-2-4-自定义变量"><a href="#6-2-4-自定义变量" class="headerlink" title="6.2.4 自定义变量"></a>6.2.4 自定义变量</h4><ol><li><p>用户变量<br> 作用域：针对于当前连接（会话）生效<br> 位置：begin end里面，也可以放在外面<br> 使用：</p><ul><li><p>①声明并赋值：<br>  set @变量名=值;或<br>  set @变量名:=值;或<br>  select @变量名:=值;</p></li><li><p>②更新值<br>  方式一：<br>  set @变量名=值;或<br>  set @变量名:=值;或<br>  select @变量名:=值</p><p>  方式二：<br>  select xx into @变量名 from 表;</p></li><li><p>③使用<br>  select @变量名;</p></li></ul></li><li><p>局部变量<br> 作用域：仅仅在定义它的begin end中有效<br> 位置：只能放在begin end中，而且只能放在第一句<br> 使用：</p><ul><li>①声明<br>  declare 变量名 类型<br>  declare 变量名 类型 【default 值】;</li><li>②赋值或更新<br>  方式一：<br>  set 变量名=值;或<br>  set 变量名:=值;或<br>  select @变量名:=值;<br>  方式二：<br>  select xx into 变量名 from 表;</li><li>③使用<br>  select 变量名;</li></ul></li></ol><pre class=" language-MySQL"><code class="language-MySQL">#案例：声明两个变量，求和并打印#用户变量SET @m=1;SET @n=1;SET @sum=@m+@n;SELECT @sum;#局部变量DECLARE m INT DEFAULT 1;DECLARE n INT DEFAULT 1;DECLARE SUM INT;SET SUM=m+n;SELECT SUM;</code></pre><h3 id="6-3-存储过程"><a href="#6-3-存储过程" class="headerlink" title="6.3 存储过程"></a>6.3 存储过程</h3><h4 id="6-3-1-存储过程概述"><a href="#6-3-1-存储过程概述" class="headerlink" title="6.3.1 存储过程概述"></a>6.3.1 存储过程概述</h4><p><strong>含义：</strong>一组预先编译好的SQL语句的集合，理解成批处理语句</p><ol><li>提高代码的重用性</li><li>简化操作</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</li></ol><h4 id="6-3-2-存储过程创建-★"><a href="#6-3-2-存储过程创建-★" class="headerlink" title="6.3.2 存储过程创建 ★"></a>6.3.2 存储过程创建 ★</h4><pre class=" language-mysql"><code class="language-mysql">create procedure 存储过程名(参数模式 参数名 参数类型)begin        存储过程体（一组合法的SQL语句）end</code></pre><p><font color="#FF0000">注意：</font></p><ol><li>参数模式：<ul><li>in：该参数可以作为输入，也就是该参数需要调用方法入值</li><li>out：该参数可以作为输出，也就是该蚕食可以作为返回值</li><li>inout：该参数既可以作为输入又可以作为输出，也就是该参数需要传入值，又可以返回值</li></ul></li><li>存储过程体的每一条sql语句都需要用分号结尾</li><li>如果存储过程体仅仅只有一句话，begin end可以省略，<br> 存储过程的结尾可以使用 delimiter 重新设置<br> 语法：<br> delimiter 结束标记<br> 案例：<br> delimiter $</li></ol><h4 id="6-3-3-调用"><a href="#6-3-3-调用" class="headerlink" title="6.3.3 调用"></a>6.3.3 调用</h4><p>call 存储过程名(实参列表)<br>举例：</p><ul><li>调用in模式的参数：call sp1（‘值’）;</li><li>调用out模式的参数：set @name; call sp1(@name);select @name;</li><li>调用inout模式的参数：set @name=值; call sp1(@name); select @name;</li></ul><pre class=" language-MySQL"><code class="language-MySQL">#1.空参列表#案例：插入到admin表中五条记录SELECT * FROM admin;DELIMITER $CREATE PROCEDURE myp1()BEGIN    INSERT INTO admin(username,`password`)     VALUES('john1','0000'),('lily','0000'),('rose','0000'),('jack','0000'),('tom','0000');END $#调用CALL myp1()$#2.创建带in模式参数的存储过程#案例1：创建存储过程实现 根据女神名，查询对应的男神信息CREATE PROCEDURE myp2(IN beautyName VARCHAR(20))BEGIN    SELECT bo.*    FROM boys bo    RIGHT JOIN beauty b ON bo.id = b.boyfriend_id    WHERE b.name=beautyName;END $#调用CALL myp2('柳岩')$#案例2 ：创建存储过程实现，用户是否登录成功CREATE PROCEDURE myp4(IN username VARCHAR(20),IN PASSWORD VARCHAR(20))BEGIN    DECLARE result INT DEFAULT 0;#声明并初始化    SELECT COUNT(*) INTO result#赋值        FROM admin    WHERE admin.username = username    AND admin.password = PASSWORD;        SELECT IF(result>0,'成功','失败');#使用END $#调用CALL myp3('张飞','8888')$#3.创建out 模式参数的存储过程#案例1：根据输入的女神名，返回对应的男神名CREATE PROCEDURE myp6(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20))BEGIN    SELECT bo.boyname INTO boyname    FROM boys bo    RIGHT JOIN    beauty b ON b.boyfriend_id = bo.id    WHERE b.name=beautyName ;END $#案例2：根据输入的女神名，返回对应的男神名和魅力值CREATE PROCEDURE myp7(IN beautyName VARCHAR(20),OUT boyName VARCHAR(20),OUT usercp INT) BEGIN    SELECT boys.boyname ,boys.usercp INTO boyname,usercp    FROM boys     RIGHT JOIN    beauty b ON b.boyfriend_id = boys.id    WHERE b.name=beautyName ;END $#调用CALL myp7('小昭',@name,@cp)$SELECT @name,@cp$#4.创建带inout模式参数的存储过程#案例1：传入a和b两个值，最终a和b都翻倍并返回CREATE PROCEDURE myp8(INOUT a INT ,INOUT b INT)BEGIN    SET a=a*2;    SET b=b*2;END $#调用SET @m=10$SET @n=20$CALL myp8(@m,@n)$SELECT @m,@n$</code></pre><h4 id="6-3-4-查看"><a href="#6-3-4-查看" class="headerlink" title="6.3.4 查看"></a>6.3.4 查看</h4><pre class=" language-mysql"><code class="language-mysql">show create procedure 存储过程名;</code></pre><pre class=" language-MySQL"><code class="language-MySQL">DESC myp2;#××SHOW CREATE PROCEDURE  myp2;</code></pre><h4 id="6-3-5-删除"><a href="#6-3-5-删除" class="headerlink" title="6.3.5 删除"></a>6.3.5 删除</h4><pre class=" language-mysql"><code class="language-mysql">drop procedure 存储过程名;</code></pre><pre class=" language-MySQL"><code class="language-MySQL">DROP PROCEDURE p1;DROP PROCEDURE p2,p3;#×××</code></pre><h3 id="6-4-函数"><a href="#6-4-函数" class="headerlink" title="6.4 函数"></a>6.4 函数</h3><h4 id="6-4-1-创建函数"><a href="#6-4-1-创建函数" class="headerlink" title="6.4.1 创建函数"></a>6.4.1 创建函数</h4><pre class=" language-mysql"><code class="language-mysql">create function 函数名(参数名 参数类型) returns  返回类型begin    函数体end</code></pre><p><font color="#FF0000">注意：</font>函数体中肯定需要有return语句</p><h4 id="6-4-2-调用函数"><a href="#6-4-2-调用函数" class="headerlink" title="6.4.2 调用函数"></a>6.4.2 调用函数</h4><pre class=" language-mysql"><code class="language-mysql">select 函数名(实参列表);</code></pre><h4 id="6-4-3-查看函数"><a href="#6-4-3-查看函数" class="headerlink" title="6.4.3 查看函数"></a>6.4.3 查看函数</h4><pre class=" language-mysql"><code class="language-mysql">show create function 函数名;</code></pre><h4 id="6-4-4-删除函数"><a href="#6-4-4-删除函数" class="headerlink" title="6.4.4 删除函数"></a>6.4.4 删除函数</h4><pre class=" language-mysql"><code class="language-mysql">drop function 函数名；</code></pre><h4 id="6-4-5-流程控制语句"><a href="#6-4-5-流程控制语句" class="headerlink" title="6.4.5 流程控制语句"></a>6.4.5 流程控制语句</h4><ol><li>if函数<br> 功能：实现简单双分支<br> 语法：if(条件，值1，值2)<br> 位置：可以作为表达式放在任何位置 if结构<br> 功能：实现多分支<br> 语法：<br> if 条件1 then 语句1;<br> elseif 条件2 then 语句2;<br> …<br> else 语句n;<br> end if;<br> 位置：<br> 只能放在begin end</li></ol><pre class=" language-MySQL"><code class="language-MySQL">#案例1：创建函数，实现传入成绩，如果成绩>90,返回A，如果成绩>80,返回B，如果成绩>60,返回C，否则返回DCREATE FUNCTION test_if(score FLOAT) RETURNS CHARBEGIN    DECLARE ch CHAR DEFAULT 'A';    IF score>90 THEN SET ch='A';    ELSEIF score>80 THEN SET ch='B';    ELSEIF score>60 THEN SET ch='C';    ELSE SET ch='D';    END IF;    RETURN ch;        END $SELECT test_if(87)$#案例2：创建存储过程，如果工资<2000,则删除，如果5000>工资>2000,则涨工资1000，否则涨工资500CREATE PROCEDURE test_if_pro(IN sal DOUBLE)BEGIN    IF sal<2000 THEN DELETE FROM employees WHERE employees.salary=sal;    ELSEIF sal>=2000 AND sal<5000 THEN UPDATE employees SET salary=salary+1000 WHERE employees.`salary`=sal;    ELSE UPDATE employees SET salary=salary+500 WHERE employees.`salary`=sal;    END IF;END $CALL test_if_pro(2100)$</code></pre><ol start="2"><li>case结构—实现多分支</li></ol><ul><li>语法1：<br>  case 表达式或字段<br>  when 值1 then 语句1;<br>  when 值2 then 语句2；<br>  ..<br>  else 语句n;<br>  end [case];</li><li>语法2：<br>  case<br>  when 条件1 then 语句1;<br>  when 条件2 then 语句2；<br>  ..<br>  else 语句n;<br>  end [case];<br>  位置：可以放在任何位置，<br>  如果放在begin end 外面，作为表达式结合着其他语句使用<br>  如果放在begin end 里面，一般作为独立的语句使用</li></ul><pre class=" language-MySQL"><code class="language-MySQL">#案例1：创建函数，实现传入成绩，如果成绩>90,返回A，如果成绩>80,返回B，如果成绩>60,返回C，否则返回DCREATE FUNCTION test_case(score FLOAT) RETURNS CHARBEGIN     DECLARE ch CHAR DEFAULT 'A';        CASE     WHEN score>90 THEN SET ch='A';    WHEN score>80 THEN SET ch='B';    WHEN score>60 THEN SET ch='C';    ELSE SET ch='D';    END CASE;    RETURN ch;END $SELECT test_case(56)$</code></pre><ol start="3"><li><p>循环结构<br>位置：只能放在begin end中<br>特点：都能实现循环结构<br>对比：<br>①这三种循环都可以省略名称，但如果循环中添加了循环控制语句（leave或iterate）则必须添加名称<br>②loop 一般用于实现简单的死循环<br>while 先判断后执行<br>repeat 先执行后判断，无条件至少执行一次</p><p> leave：类似于break，用于跳出所在的循环<br> iterate：类似于continue，用于结束本次循环，继续下一次</p></li></ol><ul><li>while<br>  语法：<br>【名称:】while 循环条件 do<br>  循环体<br>  end while 【名称】;</li></ul><pre class=" language-MySQL"><code class="language-MySQL">#1.没有添加循环控制语句#案例：批量插入，根据次数插入到admin表中多条记录CREATE PROCEDURE pro_while1(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    WHILE i<=insertCount DO        INSERT INTO admin(username,`password`) VALUES(CONCAT('Rose',i),'666');        SET i=i+1;    END WHILE;    END $CALL pro_while1(100)$#2.添加leave语句#案例：批量插入，根据次数插入到admin表中多条记录，如果次数>20则停止CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    a:WHILE i<=insertCount DO        INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');        IF i>=20 THEN LEAVE a;        END IF;        SET i=i+1;    END WHILE a;END $CALL test_while1(100)$#3.添加iterate语句#案例：批量插入，根据次数插入到admin表中多条记录，只插入偶数次CREATE PROCEDURE test_while1(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 0;    a:WHILE i<=insertCount DO        SET i=i+1;        IF MOD(i,2)!=0 THEN ITERATE a;        END IF;        INSERT INTO admin(username,`password`) VALUES(CONCAT('xiaohua',i),'0000');            END WHILE a;END $CALL test_while1(100)$</code></pre><ul><li>loop</li></ul><pre class=" language-mysql"><code class="language-mysql">  【名称：】loop         循环体    end loop 【名称】;</code></pre><ul><li>repeat</li></ul><pre class=" language-mysql"><code class="language-mysql">【名称:】repeat            循环体    until 结束条件     end repeat 【名称】;</code></pre><h4 id="6-4-6-流程控制案例"><a href="#6-4-6-流程控制案例" class="headerlink" title="6.4.6 流程控制案例"></a>6.4.6 流程控制案例</h4><pre class=" language-MySQL"><code class="language-MySQL">/*一、已知表stringcontent其中字段：id 自增长content varchar(20)向该表插入指定个数的，随机的字符串*/DROP TABLE IF EXISTS stringcontent;CREATE TABLE stringcontent(    id INT PRIMARY KEY AUTO_INCREMENT,    content VARCHAR(20)    );DELIMITER $CREATE PROCEDURE test_randstr_insert(IN insertCount INT)BEGIN    DECLARE i INT DEFAULT 1;    DECLARE str VARCHAR(26) DEFAULT 'abcdefghijklmnopqrstuvwxyz';    DECLARE startIndex INT;#代表初始索引    DECLARE len INT;#代表截取的字符长度    WHILE i<=insertcount DO        SET startIndex=FLOOR(RAND()*26+1);#代表初始索引，随机范围1-26        SET len=FLOOR(RAND()*(20-startIndex+1)+1);#代表截取长度，随机范围1-（20-startIndex+1）        INSERT INTO stringcontent(content) VALUES(SUBSTR(str,startIndex,len));        SET i=i+1;    END WHILE;END $CALL test_randstr_insert(10)$</code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础知识（一）</title>
      <link href="/2021/12/30/MySQLBasics/"/>
      <url>/2021/12/30/MySQLBasics/</url>
      
        <content type="html"><![CDATA[<h2 id="1-与MySQL的第一次亲密接触"><a href="#1-与MySQL的第一次亲密接触" class="headerlink" title="1. 与MySQL的第一次亲密接触"></a>1. 与MySQL的第一次亲密接触</h2><h3 id="1-1-数据库的相关概念"><a href="#1-1-数据库的相关概念" class="headerlink" title="1.1 数据库的相关概念"></a>1.1 数据库的相关概念</h3><h4 id="1-1-1-数据库的好处"><a href="#1-1-1-数据库的好处" class="headerlink" title="1.1.1 数据库的好处"></a>1.1.1 数据库的好处</h4><p>(1) 可以持久化数据到本地<br>(2) 结构化查询</p><h4 id="1-1-2-数据库的常见概念"><a href="#1-1-2-数据库的常见概念" class="headerlink" title="1.1.2 数据库的常见概念"></a>1.1.2 数据库的常见概念</h4><p>(1) DB：数据库，存储数据的容器<br>(2) DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理DB<br>(3) SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</p><h4 id="1-1-3-数据库存储数据的特点"><a href="#1-1-3-数据库存储数据的特点" class="headerlink" title="1.1.3 数据库存储数据的特点"></a>1.1.3 数据库存储数据的特点</h4><p>(1) 数据存放到表中，然后表再放到库中<br>(2) 一个库中可以有多张表，每张表具有唯一的表名用来标识自己<br>(3) 表中有一个或多个列，列又称为“字段”，相当于java中“属性”<br>(4) 表中的每一行数据，相当于java中“对象”</p><h4 id="1-1-4-常见的数据库管理系统"><a href="#1-1-4-常见的数据库管理系统" class="headerlink" title="1.1.4 常见的数据库管理系统"></a>1.1.4 常见的数据库管理系统</h4><p>mysql、oracle、db2、sqlserver</p><h3 id="1-2-MySQL的介绍"><a href="#1-2-MySQL的介绍" class="headerlink" title="1.2 MySQL的介绍"></a>1.2 MySQL的介绍</h3><h4 id="1-2-1-MySQL的背景"><a href="#1-2-1-MySQL的背景" class="headerlink" title="1.2.1 MySQL的背景"></a>1.2.1 MySQL的背景</h4><p>前身属于瑞典的一家公司，MySQL AB<br>08年被sun公司收购<br>09年sun被oracle收购</p><h4 id="1-2-2-MySQL的优点"><a href="#1-2-2-MySQL的优点" class="headerlink" title="1.2.2 MySQL的优点"></a>1.2.2 MySQL的优点</h4><p>(1) 开源、免费、成本低<br>(2) 性能高、移植性也好<br>(3) 体积小，便于安装</p><h4 id="1-2-3-MySQL的安装"><a href="#1-2-3-MySQL的安装" class="headerlink" title="1.2.3 MySQL的安装"></a>1.2.3 MySQL的安装</h4><p>属于c/s架构的软件，一般来讲安装服务端<br>企业版<br>社区版<br>5.5  5.6   5.7 8.0</p><h4 id="1-2-4-MySQL服务的启动和停止"><a href="#1-2-4-MySQL服务的启动和停止" class="headerlink" title="1.2.4 MySQL服务的启动和停止"></a>1.2.4 MySQL服务的启动和停止</h4><p>(1) 通过命令行</p><ul><li>net start 服务名</li><li>net stop 服务名</li></ul><p>(2) 计算机——右击——管理——服务</p><h4 id="1-2-5-MySQL服务的登录和退出"><a href="#1-2-5-MySQL服务的登录和退出" class="headerlink" title="1.2.5 MySQL服务的登录和退出"></a>1.2.5 MySQL服务的登录和退出</h4><p>登录：mysql  -h主机名  -P端口号   -u用户名  -p密码<br>退出：exit或ctrl+c</p><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2. DQL语言"></a>2. DQL语言</h2><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><h4 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h4><p>语法：select  查询列表  from  表名;<br>类似于：System.out.println(打印东西)<br>特点：</p><ul><li>查询列表可以是字段、常量、表达式、函数</li><li>查询结果是一个虚拟表</li></ul><h4 id="2-2-2查询单个字段"><a href="#2-2-2查询单个字段" class="headerlink" title="2.2.2查询单个字段"></a>2.2.2查询单个字段</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    last_name FROM    employees;</code></pre><h4 id="2-2-3-查询多个字段"><a href="#2-2-3-查询多个字段" class="headerlink" title="2.2.3 查询多个字段"></a>2.2.3 查询多个字段</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    last_name,    salary,    email FROM    employees;</code></pre><h4 id="2-2-4-查询所有字段"><a href="#2-2-4-查询所有字段" class="headerlink" title="2.2.4 查询所有字段"></a>2.2.4 查询所有字段</h4><pre class=" language-MySQL"><code class="language-MySQL">#方式一：SELECT    `employee_id`,    `first_name`,    `last_name`,    `phone_number`,    `last_name`,    `job_id`,    `phone_number`,    `job_id`,    `salary`,    `commission_pct`,    `manager_id`,    `department_id`,    `hiredate` FROM    employees;        #方式二：  SELECT    * FROM    employees;</code></pre><h4 id="2-2-5-查询常量"><a href="#2-2-5-查询常量" class="headerlink" title="2.2.5 查询常量"></a>2.2.5 查询常量</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    100;        SELECT    'john';</code></pre><h4 id="2-2-6-查询表达式"><a href="#2-2-6-查询表达式" class="headerlink" title="2.2.6 查询表达式"></a>2.2.6 查询表达式</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    100 % 98;</code></pre><h4 id="2-2-7-查询函数"><a href="#2-2-7-查询函数" class="headerlink" title="2.2.7 查询函数"></a>2.2.7 查询函数</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    VERSION( );</code></pre><h4 id="2-2-8-起别名"><a href="#2-2-8-起别名" class="headerlink" title="2.2.8 起别名"></a>2.2.8 起别名</h4><pre class=" language-MySQL"><code class="language-MySQL"> #方式一：使用asSELECT    100 % 98 AS 结果;SELECT    last_name AS 姓,    first_name AS 名 FROM    employees;#方式二：使用空格SELECT    last_name 姓,    first_name 名 FROM    employees;#案例：查询salary，显示结果为 out putSELECT    salary AS "out put" FROM    employees;</code></pre><h4 id="2-2-9-去重"><a href="#2-2-9-去重" class="headerlink" title="2.2.9 去重"></a>2.2.9 去重</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例：查询员工表中涉及到的所有的部门编号SELECT DISTINCT    department_id FROM    employees;</code></pre><h4 id="2-2-10-号的作用"><a href="#2-2-10-号的作用" class="headerlink" title="2.2.10 +号的作用"></a>2.2.10 +号的作用</h4><pre class=" language-MySQL"><code class="language-MySQL">/*java中的+号：①运算符，两个操作数都为数值型②连接符，只要有一个操作数为字符串mysql中的+号：仅仅只有一个功能：运算符select 100+90; 两个操作数都为数值型，则做加法运算select '123'+90;只要其中一方为字符型，试图将字符型数值转换成数值型            如果转换成功，则继续做加法运算select 'john'+90;    如果转换失败，则将字符型数值转换成0select null+10; 只要其中一方为null，则结果肯定为null*/#案例：查询员工名和姓连接成一个字段，并显示为 姓名SELECT    CONCAT( 'a', 'b', 'c' ) AS 结果;SELECT    CONCAT( last_name, first_name ) AS 姓名 FROM    employees;</code></pre><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><h4 id="2-2-1-概述-1"><a href="#2-2-1-概述-1" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h4><p><strong>语法：</strong><br>    select 查询列表<br>    from 表名<br>    where 筛选条件</p><p><strong>筛选条件分类</strong></p><ul><li>按条件表达式筛选   &lt;     &gt;     =     &lt;&gt;     !=     &gt;=     &lt;=     &lt;=&gt;</li><li>按逻辑表达式筛选   and     or    not </li><li>模糊查询   like   between…and…   in   (is null/is not null)<br>is null：仅仅可以判断null值<br>&lt;=&gt;:   既可以判断null值又可以判断普通的数值<table><thead><tr><th></th><th>普通类型的数值</th><th>null值</th><th>可读性</th></tr></thead><tbody><tr><td>is null</td><td>×</td><td>√</td><td>√</td></tr><tr><td>&lt;=&gt;</td><td>√</td><td>√</td><td>×</td></tr></tbody></table></li></ul><h4 id="2-2-2按条件表达式筛选"><a href="#2-2-2按条件表达式筛选" class="headerlink" title="2.2.2按条件表达式筛选"></a>2.2.2按条件表达式筛选</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例1：查询工资>12000的员工信息SELECT     *FROM    employeesWHERE    salary>12000;        #案例2：查询部门编号不等于90号的员工名和部门编号SELECT     last_name,    department_idFROM    employeesWHERE    department_id<>90;</code></pre><h4 id="2-2-3-按逻辑表达式筛选"><a href="#2-2-3-按逻辑表达式筛选" class="headerlink" title="2.2.3 按逻辑表达式筛选"></a>2.2.3 按逻辑表达式筛选</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例1：查询工资z在10000到20000之间的员工名、工资以及奖金SELECT    last_name,    salary,    commission_pct FROM    employees WHERE    salary >= 10000     AND salary <= 20000;        #案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息SELECT    *FROM    employeesWHERE    NOT(department_id>=90 AND  department_id<=110) OR salary>15000;</code></pre><h4 id="2-2-4-模糊查询"><a href="#2-2-4-模糊查询" class="headerlink" title="2.2.4 模糊查询"></a>2.2.4 模糊查询</h4><pre class=" language-MySQL"><code class="language-MySQL">/***like****************//*特点：①一般和通配符搭配使用    通配符：    % 任意多个字符,包含0个字符    _ 任意单个字符*/#案例1：查询员工名中包含字符a的员工信息select     *from    employeeswhere    last_name like '%a%';#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资select    last_name,    salaryFROM    employeesWHERE    last_name LIKE '__n_l%';#案例3：查询员工名中第二个字符为_的员工名SELECT    last_nameFROM    employeesWHERE    last_name LIKE '_$_%' ESCAPE '$';/****between and *********//*①使用between and 可以提高语句的简洁度②包含临界值③两个临界值不要调换顺序*/#案例1：查询员工编号在100到120之间的员工信息SELECT    * FROM    employees WHERE    employee_id >= 120     AND employee_id <= 100;SELECT    *FROM    employeesWHERE    employee_id BETWEEN 120 AND 100;/***********in***********//*含义：判断某字段的值是否属于in列表中的某一项特点：    ①使用in提高语句简洁度    ②in列表的值类型必须一致或兼容    ③in列表中不支持通配符*/#案例：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号SELECT    last_name,    job_id FROM    employees WHERE    job_id = 'IT_PROT'     OR job_id = 'AD_VP'     OR JOB_ID = 'AD_PRES';SELECT    last_name,    job_id FROM    employees WHERE    job_id IN ( 'IT_PROT', 'AD_VP', 'AD_PRES' );    /******is null***********************//*=或<>不能用于判断null值is null或is not null 可以判断null值*/#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct IS NULL;#案例1：查询有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct IS NOT NULL;    #----------以下为×SELECT    last_name,    commission_pctFROM    employeesWHERE     salary IS 12000;    #安全等于  <=>#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct <=>NULL;    #案例2：查询工资为12000的员工信息SELECT    last_name,    salaryFROM    employeesWHERE     salary <=> 12000;</code></pre><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><h4 id="2-3-1-概述"><a href="#2-3-1-概述" class="headerlink" title="2.3.1 概述"></a>2.3.1 概述</h4><p><strong>语法：</strong><br>select 查询列表<br>from 表<br>where 筛选条件<br>order by 排序列表 【asc}desc】<br><strong>特点：</strong></p><ul><li>asc ：升序，如果不写默认升序<br>   desc：降序</li><li>排序列表 支持 单个字段、多个字段、函数、表达式、别名</li><li>order by的位置一般放在查询语句的最后（除limit语句之外）</li></ul><h4 id="2-3-2-按单个字段排序"><a href="#2-3-2-按单个字段排序" class="headerlink" title="2.3.2 按单个字段排序"></a>2.3.2 按单个字段排序</h4><pre class=" language-mysql"><code class="language-mysql">SELECT    * FROM    employees ORDER BY    salary DESC;</code></pre><h4 id="2-3-3-添加筛选条件再排序"><a href="#2-3-3-添加筛选条件再排序" class="headerlink" title="2.3.3 添加筛选条件再排序"></a>2.3.3 添加筛选条件再排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询部门编号>=90的员工信息，并按员工编号降序SELECT    * FROM    employees WHERE    department_id >= 90 ORDER BY    employee_id DESC;</code></pre><h4 id="2-3-4-按表达式排序"><a href="#2-3-4-按表达式排序" class="headerlink" title="2.3.4 按表达式排序"></a>2.3.4 按表达式排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息 按年薪降序SELECT    *,    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) FROM    employees ORDER BY    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) DESC;</code></pre><h4 id="2-3-5-按别名排序"><a href="#2-3-5-按别名排序" class="headerlink" title="2.3.5 按别名排序"></a>2.3.5 按别名排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息 按年薪升序SELECT    *,    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) 年薪 FROM    employees ORDER BY    年薪 ASC;</code></pre><h4 id="2-3-6-按函数排序"><a href="#2-3-6-按函数排序" class="headerlink" title="2.3.6 按函数排序"></a>2.3.6 按函数排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工名，并且按名字的长度降序SELECT    LENGTH( last_name ),    last_name FROM    employees ORDER BY    LENGTH( last_name ) DESC;</code></pre><h4 id="2-3-7-按多个字段排序"><a href="#2-3-7-按多个字段排序" class="headerlink" title="2.3.7 按多个字段排序"></a>2.3.7 按多个字段排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息，要求先按工资降序，再按employee_id升序SELECT    * FROM    employees ORDER BY    salary DESC,    employee_id ASC;</code></pre><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><h4 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1 概述"></a>2.4.1 概述</h4><p><strong>功能</strong>：类似于java中的方法<br><strong>好处</strong>：</p><ul><li>隐藏了实现细节  </li><li>提高代码的重用性</li></ul><p><strong>调用</strong>：select 函数名(实参列表) 【from 表】<br><strong>特点：</strong></p><ul><li>叫什么（函数名）</li><li>干什么（函数功能）</li></ul><p><strong>分类</strong></p><ul><li>单行函数<ul><li>字符函数<br>length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)、concat、substr、     instr、trim、upper、lower、lpad、rpad、replace</li><li>数学函数<br>round、ceil、floor、truncate、mod</li><li>日期函数：<br>now、curdate、curtime、year、month、monthname、day、hour、minute、   second、str_to_date、date_format</li><li>其他函数：<br>version、database、user</li><li>控制函数<br>if、case</li></ul></li><li>分组函数<br>功能：做统计使用，又称为统计函数、聚合函数、组函数</li></ul><h4 id="2-4-2-字符函数"><a href="#2-4-2-字符函数" class="headerlink" title="2.4.2 字符函数"></a>2.4.2 字符函数</h4><p>length 获取参数值的字节个数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LENGTH( 'john' );#4SELECT    LENGTH( '张三丰hahaha' );#15</code></pre><p>concat 拼接字符串</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CONCAT( last_name, '_', first_name ) 姓名 FROM    employees;</code></pre><p>upper、lower</p><pre class=" language-mysql"><code class="language-mysql">SELECT    UPPER( 'john' );SELECT    LOWER( 'joHn' );    #示例：将姓变大写，名变小写，然后拼接SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;</code></pre><p>substr、substring</p><pre class=" language-mysql"><code class="language-mysql">#注意：索引从1开始#截取从指定索引处后面所有字符SELECT    SUBSTR( '李莫愁爱上了陆展元', 7 ) out_put;#截取从指定索引处指定字符长度的字符SELECT    SUBSTR( '李莫愁爱上了陆展元', 1, 3 ) out_put;#案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来SELECT    CONCAT( UPPER( SUBSTR( last_name, 1, 1 ) ), '_', LOWER( SUBSTR( last_name, 2 ) ) ) out_put FROM    employees;</code></pre><p> instr 返回子串第一次出现的索引，如果找不到返回0</p><pre class=" language-mysql"><code class="language-mysql">SELECT    INSTR( '杨不殷六侠悔爱上了殷六侠', '殷八侠' ) AS out_put;</code></pre><p>trim</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LENGTH( TRIM( '    张翠山    ' ) ) AS out_put;SELECT    TRIM( 'aa' FROM 'aaaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' ) AS out_put;</code></pre><p> lpad 用指定的字符实现左填充指定长度</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LPAD( '殷素素', 2, '*' ) AS out_put;#殷素</code></pre><p> rpad 用指定的字符实现右填充指定长度</p><pre class=" language-mysql"><code class="language-mysql">SELECT    RPAD( '殷素素', 12, 'ab' ) AS out_put;#殷素素ababababa</code></pre><p> replace 替换</p><pre class=" language-mysql"><code class="language-mysql">SELECT REPLACE    ( '周芷若周芷若周芷若周芷若张无忌爱上了周芷若', '周芷若', '赵敏' ) AS out_put;#赵敏赵敏赵敏赵敏张无忌爱上了赵敏</code></pre><h4 id="2-4-3-数学函数"><a href="#2-4-3-数学函数" class="headerlink" title="2.4.3 数学函数"></a>2.4.3 数学函数</h4><p>round 四舍五入</p><pre class=" language-mysql"><code class="language-mysql">SELECT    ROUND( - 1.55 );#-2    SELECT    ROUND( 1.567, 2 );#1.57</code></pre><p>ceil 向上取整,返回&gt;=该参数的最小整数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CEIL( - 1.02 );#-1</code></pre><p>floor 向下取整，返回&lt;=该参数的最大整数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    FLOOR( - 9.99 );#-10</code></pre><p>truncate 截断</p><pre class=" language-mysql"><code class="language-mysql">SELECT TRUNCATE    ( 1.69999, 1 );#1.6</code></pre><p>mod取余</p><pre class=" language-mysql"><code class="language-mysql">SELECT MOD    ( 10,- 3 );#1    SELECT    - 10 % 3;#-1</code></pre><h4 id="2-4-4-日期函数"><a href="#2-4-4-日期函数" class="headerlink" title="2.4.4 日期函数"></a>2.4.4 日期函数</h4><p>now 返回当前系统日期+时间</p><pre class=" language-mysql"><code class="language-mysql">SELECT    NOW( );</code></pre><p>curdate 返回当前系统日期，不包含时间</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CURDATE( );</code></pre><p>curtime 返回当前时间，不包含日期</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CURTIME( );</code></pre><p>获取指定的部分，年、月、日、小时、分钟、秒</p><pre class=" language-mysql"><code class="language-mysql">SELECT YEAR    ( NOW( ) ) 年;    SELECT YEAR    ( '1998-1-1' ) 年;SELECT MONTH    ( NOW( ) ) 月;    SELECT    MONTHNAME( NOW( ) ) 月;</code></pre><p>str_to_date 将字符通过指定的格式转换成日期</p><pre class=" language-mysql"><code class="language-mysql">SELECT    STR_TO_DATE( '1998-3-2', '%Y-%c-%d' ) AS out_put;#1998-03-02;SELECT    * FROM    employees WHERE    hiredate = STR_TO_DATE( '4-3 1992', '%c-%d %Y' );</code></pre><p>date_format 将日期转换成字符</p><pre class=" language-mysql"><code class="language-mysql">SELECT    DATE_FORMAT( NOW( ), '%y年%m月%d日' ) AS out_put;</code></pre><h4 id="2-4-5-其他函数"><a href="#2-4-5-其他函数" class="headerlink" title="2.4.5 其他函数"></a>2.4.5 其他函数</h4><pre class=" language-mysql"><code class="language-mysql">SELECT VERSION();SELECT DATABASE();SELECT USER();</code></pre><h4 id="2-4-6-流程控制函数"><a href="#2-4-6-流程控制函数" class="headerlink" title="2.4.6 流程控制函数"></a>2.4.6 流程控制函数</h4><pre class=" language-mysql"><code class="language-mysql">#1.if函数： if else 的效果SELECTIF    ( 10 < 5, '大', '小' );SELECT    last_name,    commission_pct,IF    ( commission_pct IS NULL, '没奖金，呵呵', '有奖金，嘻嘻' ) 备注 FROM    employees;    #案例：查询员工的工资的情况#如果工资>20000,显示A级别#如果工资>15000,显示B级别#如果工资>10000，显示C级别#否则，显示D级别SELECT salary,CASE WHEN salary>20000 THEN 'A'WHEN salary>15000 THEN 'B'WHEN salary>10000 THEN 'C'ELSE 'D'END AS 工资级别FROM employees;/*案例：查询员工的工资，要求部门号=30，显示的工资为1.1倍部门号=40，显示的工资为1.2倍部门号=50，显示的工资为1.3倍其他部门，显示的工资为原工资*/SELECT salary 原始工资,department_id,CASE department_idWHEN 30 THEN salary*1.1WHEN 40 THEN salary*1.2WHEN 50 THEN salary*1.3ELSE salaryEND AS 新工资FROM employees;</code></pre><h4 id="2-4-7-分组函数"><a href="#2-4-7-分组函数" class="headerlink" title="2.4.7 分组函数"></a>2.4.7 分组函数</h4><ul><li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li><li>分类：<br>sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数</li><li>特点：<ul><li>sum、avg一般用于处理数值型</li><li>max、min、count可以处理任何类型</li><li>以上分组函数都忽略null值</li><li>可以和distinct搭配实现去重的运算</li><li>count函数的单独介绍<br>一般使用count(*)用作统计行数</li><li>和分组函数一同查询的字段要求是group by后的字段</li></ul></li></ul><p>简单 的使用</p><pre class=" language-mysql"><code class="language-mysql">#1、简单 的使用SELECT    SUM( salary ) FROM    employees;    SELECT    AVG( salary ) FROM    employees;    SELECT    MIN( salary ) FROM    employees;    SELECT    MAX( salary ) FROM    employees;    SELECT    COUNT( salary ) FROM    employees;    SELECT    SUM( salary ) 和,    AVG( salary ) 平均,    MAX( salary ) 最高,    MIN( salary ) 最低,    COUNT( salary ) 个数 FROM    employees;    SELECT    SUM( salary ) 和,    ROUND( AVG( salary ), 2 ) 平均,    MAX( salary ) 最高,    MIN( salary ) 最低,    COUNT( salary ) 个数 FROM    employees;</code></pre><p>参数支持哪些类型</p><pre class=" language-mysql"><code class="language-mysql">#2、参数支持哪些类型SELECT    SUM( last_name ),    AVG( last_name ) FROM    employees;    SELECT    SUM( hiredate ),    AVG( hiredate ) FROM    employees;    SELECT    MAX( last_name ),    MIN( last_name ) FROM    employees;    SELECT    MAX( hiredate ),    MIN( hiredate ) FROM    employees;    SELECT    COUNT( commission_pct ) FROM    employees;    SELECT    COUNT( last_name ) FROM    employees;</code></pre><p>是否忽略null（忽略）</p><pre class=" language-mysql"><code class="language-mysql">SELECT    SUM( commission_pct ),    AVG( commission_pct ),    SUM( commission_pct ) / 35,    SUM( commission_pct ) / 107 FROM    employees;    SELECT    MAX( commission_pct ),    MIN( commission_pct ) FROM    employees;SELECT    COUNT( commission_pct ) FROM    employees;    SELECT    commission_pct FROM    employees;</code></pre><p>和distinct搭配</p><pre class=" language-mysql"><code class="language-mysql">SELECT    SUM( DISTINCT salary ),    SUM( salary ) FROM    employees;    SELECT    COUNT( DISTINCT salary ),    COUNT( salary ) FROM    employees;</code></pre><p>count函数的详细介绍</p><pre class=" language-mysql"><code class="language-mysql">SELECT    COUNT( salary ) FROM    employees;    SELECT    COUNT( * ) FROM    employees;    SELECT    COUNT( 1 ) FROM    employees;/*效率：MYISAM存储引擎下  ，COUNT(*)的效率高INNODB存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些*/</code></pre><p>和分组函数一同查询的字段有限制</p><pre class=" language-mysql"><code class="language-mysql">SELECT    AVG( salary ),    employee_id FROM    employees;</code></pre><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><h4 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h4><ul><li><p><strong>语法：</strong><br>select 查询列表<br>from 表<br>【where 筛选条件】<br>group by 分组的字段<br>【order by 排序的字段】;</p></li><li><p><strong>特点：</strong></p><ul><li><p>和分组函数一同查询的字段必须是group by后出现的字段</p></li><li><p>筛选分为两类：分组前筛选和分组后筛选</p></li><li><table><thead><tr><th></th><th>针对的表</th><th>位置</th><th>连接的关键字</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td>group by前</td><td>where</td></tr><tr><td>分组后筛选</td><td>group by后的结果集</td><td>group by后</td><td>group by后  having</td></tr></tbody></table></li><li><p>分组函数做筛选不能放在where后面</p></li><li><p>where——group by——having<br> 一般来讲，能用分组前筛选的，尽量使用分组前筛选，提高效率</p></li><li><p>分组可以按单个字段也可以按多个字段</p></li><li><p>可以搭配着排序使用</p></li></ul></li></ul><h4 id="2-5-2-简单分组"><a href="#2-5-2-简单分组" class="headerlink" title="2.5.2 简单分组"></a>2.5.2 简单分组</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询每个工种的员工平均工资SELECT    AVG( salary ),    job_id FROM    employees GROUP BY    job_id;#案例2：查询每个位置的部门个数SELECT    COUNT( * ),    location_id FROM    departments GROUP BY    location_id;</code></pre><h4 id="2-5-3-分组前的筛选"><a href="#2-5-3-分组前的筛选" class="headerlink" title="2.5.3 分组前的筛选"></a>2.5.3 分组前的筛选</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询邮箱中包含a字符的 每个部门的最高工资SELECT    MAX( salary ),    department_id FROM    employees WHERE    email LIKE '%a%' GROUP BY    department_id;#案例2：查询有奖金的每个领导手下员工的平均工资SELECT    AVG( salary ),    manager_id FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    manager_id;</code></pre><h4 id="2-5-4-分组后筛选"><a href="#2-5-4-分组后筛选" class="headerlink" title="2.5.4 分组后筛选"></a>2.5.4 分组后筛选</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询哪个部门的员工个数>5#①查询每个部门的员工个数SELECT    COUNT( * ),    department_id FROM    employees GROUP BY    department_id;#② 筛选刚才①结果SELECT    COUNT( * ),    department_id FROM    employees GROUP BY    department_id HAVING    COUNT( * ) > 5;#案例2：每个工种有奖金的员工的最高工资>12000的工种编号和最高工资SELECT    job_id,    MAX( salary ) FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    job_id HAVING    MAX( salary ) > 12000;#案例3：领导编号>102的每个领导手下的最低工资大于5000的领导编号和最低工资SELECT    manager_id,    MIN( salary ) FROM    employees GROUP BY    manager_id HAVING    MIN( salary ) > 5000;</code></pre><h4 id="2-5-5-添加排序"><a href="#2-5-5-添加排序" class="headerlink" title="2.5.5 添加排序"></a>2.5.5 添加排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：每个工种有奖金的员工的最高工资>6000的工种编号和最高工资,按最高工资升序SELECT    job_id,    MAX( salary ) m FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    job_id HAVING    m > 6000 ORDER BY    m;</code></pre><h4 id="2-5-6-按多个字段分组"><a href="#2-5-6-按多个字段分组" class="headerlink" title="2.5.6 按多个字段分组"></a>2.5.6 按多个字段分组</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个工种每个部门的最低工资,并按最低工资降序SELECT    MIN( salary ),    job_id,    department_id FROM    employees GROUP BY    department_id,    job_id ORDER BY    MIN( salary ) DESC;</code></pre><h3 id="2-6-连接查询"><a href="#2-6-连接查询" class="headerlink" title="2.6 连接查询"></a>2.6 连接查询</h3><h4 id="2-6-1-概述"><a href="#2-6-1-概述" class="headerlink" title="2.6.1 概述"></a>2.6.1 概述</h4><ul><li><strong>含义</strong>：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</li><li><strong>笛卡尔乘积现象</strong>：表1 有m行，表2有n行，结果=m*n行。当查询多个表时，没有添加        有效的连接条件，导致多个表所有行实现完全连接<ul><li>发生原因：没有有效的连接条件</li><li>如何避免：添加有效的连接条件</li></ul></li><li><strong>分类</strong>：<ul><li><strong>按年代分类：</strong><ul><li>sql92标准:仅仅支持内连接</li><li>sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接</li></ul></li><li><strong>按功能分类</strong>：<ul><li>内连接：等值连接、非等值连接、自连接</li><li>外连接：左外连接、右外连接、全外连接、交叉连接</li></ul></li><li><strong>等值连接（sql92）</strong><br>  多表连接的结果为多表的交集部分<br>  n表连接，至少需要n-1个连接条件<br>  多表的顺序没有要求<br>  一般需要为表起别名<br> 可以搭配前面介绍的所有子句进行搭配使用</li></ul></li></ul><h4 id="2-6-2-sql92标准—等值连接"><a href="#2-6-2-sql92标准—等值连接" class="headerlink" title="2.6.2 sql92标准—等值连接"></a>2.6.2 sql92标准—等值连接</h4><ol><li>多表等值连接的结果为多表的交集部分</li><li>n表连接，至少需要n-1个连接条件</li><li> 多表的顺序没有要求</li><li>一般需要为表起别名</li><li>可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</li></ol><pre class=" language-mysql"><code class="language-mysql">#案例1：查询女神名和对应的男神名SELECT NAME    ,    boyName FROM    boys,    beauty WHERE    beauty.boyfriend_id = boys.id;#案例2：查询员工名和对应的部门名SELECT    last_name,    department_name FROM    employees,    departments WHERE    employees.`department_id` = departments.`department_id`;</code></pre><p><strong>为表起别名</strong></p><ol><li>提高语句的简洁度</li><li>区分多个重名的字段</li></ol><p>注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定     </p><pre class=" language-mysql"><code class="language-mysql">#查询员工名、工种号、工种名SELECT    e.last_name,    e.job_id,    j.job_title FROM    employees e,    jobs j WHERE    e.`job_id` = j.`job_id`;</code></pre><p><strong>两个表的顺序是否可以调换</strong></p><pre class=" language-mysql"><code class="language-mysql">#查询员工名、工种号、工种名SELECT    e.last_name,    e.job_id,    j.job_title FROM    jobs j,    employees e WHERE    e.`job_id` = j.`job_id`;</code></pre><p><strong>可以加筛选</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询有奖金的员工名、部门名SELECT    last_name,    department_name,    commission_pct FROM    employees e,    departments d WHERE    e.`department_id` = d.`department_id`     AND e.`commission_pct` IS NOT NULL;#案例2：查询城市名中第二个字符为o的部门名和城市名SELECT    department_name,    city FROM    departments d,    locations l WHERE    d.`location_id` = l.`location_id`     AND city LIKE '_o%';</code></pre><p><strong>可以加分组</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询每个城市的部门个数SELECT    COUNT( * ) 个数,    city FROM    departments d,    locations l WHERE    d.`location_id` = l.`location_id` GROUP BY    city;#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资SELECT    department_name,    d.`manager_id`,    MIN( salary ) FROM    departments d,    employees e WHERE    d.`department_id` = e.`department_id`     AND commission_pct IS NOT NULL GROUP BY    department_name,    d.`manager_id`;</code></pre><p><strong>可以加排序</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序SELECT    job_title,    COUNT( * ) FROM    employees e,    jobs j WHERE    e.`job_id` = j.`job_id` GROUP BY    job_title ORDER BY    COUNT( * ) DESC;</code></pre><p><strong>可以实现三表连接</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工名、部门名和所在的城市SELECT    last_name,    department_name,    city FROM    employees e,    departments d,    locations l WHERE    e.`department_id` = d.`department_id`     AND d.`location_id` = l.`location_id`     AND city LIKE 's%' ORDER BY    department_name DESC;</code></pre><h4 id="2-6-3-sql92标准—非等值连接"><a href="#2-6-3-sql92标准—非等值连接" class="headerlink" title="2.6.3 sql92标准—非等值连接"></a>2.6.3 sql92标准—非等值连接</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询员工的工资和工资级别SELECT    salary,    grade_level FROM    employees e,    job_grades g WHERE    salary BETWEEN g.`lowest_sal`     AND g.`highest_sal`     AND g.`grade_level` = 'A';</code></pre><h4 id="2-6-4-sql92标准—自连接"><a href="#2-6-4-sql92标准—自连接" class="headerlink" title="2.6.4 sql92标准—自连接"></a>2.6.4 sql92标准—自连接</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询 员工名和上级的名称SELECT    e.employee_id,    e.last_name,    m.employee_id,    m.last_name FROM    employees e,    employees m WHERE    e.`manager_id` = m.`employee_id`;</code></pre><h4 id="2-6-5-sql99标准—等值连接"><a href="#2-6-5-sql99标准—等值连接" class="headerlink" title="2.6.5 sql99标准—等值连接"></a>2.6.5 sql99标准—等值连接</h4><p><strong>1. 语法：</strong><br>    select 查询列表<br>    from 表1 别名 【连接类型】<br>    join 表2 别名<br>    on 连接条件<br>    【where 筛选条件】<br>    【group by 分组】<br>    【having 筛选条件】<br>    【order by 排序列表】<br><strong>2. 分类：</strong><br>    <strong>内连接（★）</strong>：inner<br>    <strong>语法：</strong><br>            select 查询列表<br>            from 表1 别名<br>            inner join 表2 别名<br>            on 连接条件;<br>            分类：<br>                等值<br>                非等值<br>                自连接<br>            <strong>特点：</strong><br>                ①添加排序、分组、筛选<br>                ②inner可以省略<br>                ③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读<br>                ④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集<br>   <strong>外连接</strong><br>         左外(★):left 【outer】<br>         右外(★)：right 【outer】<br>         全外：full【outer】<br>   交叉连接：cross<br>#sql92和 sql99pk<br>功能：sql99支持的较多<br>可读性：sql99实现连接条件和筛选条件的分离，可读性较高</p><pre class=" language-mysql"><code class="language-mysql">#1、等值连接#案例1.查询员工名、部门名SELECT    last_name,    department_name FROM    departments d    JOIN employees e ON e.`department_id` = d.`department_id`;#案例2.查询名字中包含e的员工名和工种名（添加筛选）SELECT    last_name,    job_title FROM    employees e    INNER JOIN jobs j ON e.`job_id` = j.`job_id` WHERE    e.`last_name` LIKE '%e%';#3. 查询部门个数>3的城市名和部门个数，（添加分组+筛选）#①查询每个城市的部门个数#②在①结果上筛选满足条件的SELECT    city,    COUNT( * ) 部门个数 FROM    departments d    INNER JOIN locations l ON d.`location_id` = l.`location_id` GROUP BY    city HAVING    COUNT( * ) > 3;#案例4.查询哪个部门的员工个数>3的部门名和员工个数，并按个数降序（添加排序）#①查询每个部门的员工个数SELECT    COUNT( * ),    department_name FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id` GROUP BY    department_name#② 在①结果上筛选员工个数>3的记录，并排序SELECT    COUNT( * ) 个数,    department_name FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id` GROUP BY    department_name HAVING    COUNT( * ) > 3 ORDER BY    COUNT( * ) DESC;#5.查询员工名、部门名、工种名，并按部门名降序（添加三表连接）SELECT    last_name,    department_name,    job_title FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id`    INNER JOIN jobs j ON e.`job_id` = j.`job_id` ORDER BY    department_name DESC;</code></pre><h4 id="2-6-6-sql99标准—非等值连接"><a href="#2-6-6-sql99标准—非等值连接" class="headerlink" title="2.6.6 sql99标准—非等值连接"></a>2.6.6 sql99标准—非等值连接</h4><pre class=" language-mysql"><code class="language-mysql">#二）非等值连接#查询员工的工资级别SELECT    salary,    grade_level FROM    employees e    JOIN job_grades g ON e.`salary` BETWEEN g.`lowest_sal`     AND g.`highest_sal`; #查询工资级别的个数>20的个数，并且按工资级别降序SELECT    COUNT( * ),    grade_level FROM    employees e    JOIN job_grades g ON e.`salary` BETWEEN g.`lowest_sal`     AND g.`highest_sal` GROUP BY    grade_level HAVING    COUNT( * ) > 20 ORDER BY    grade_level DESC;</code></pre><h4 id="2-6-7-sql99标准—自连接"><a href="#2-6-7-sql99标准—自连接" class="headerlink" title="2.6.7 sql99标准—自连接"></a>2.6.7 sql99标准—自连接</h4><pre class=" language-mysql"><code class="language-mysql"> #查询员工的名字、上级的名字SELECT    e.last_name,    m.last_name FROM    employees e    JOIN employees m ON e.`manager_id` = m.`employee_id`;  #查询姓名中包含字符k的员工的名字、上级的名字SELECT    e.last_name,    m.last_name FROM    employees e    JOIN employees m ON e.`manager_id` = m.`employee_id` WHERE    e.`last_name` LIKE '%k%';</code></pre><h4 id="2-6-8-sql99标准—外连接"><a href="#2-6-8-sql99标准—外连接" class="headerlink" title="2.6.8 sql99标准—外连接"></a>2.6.8 sql99标准—外连接</h4><p><strong>应用场景：</strong>用于查询一个表中有，另一个表没有的记录</p><p><strong>特点：</strong></p><ol><li>外连接的查询结果为主表中的所有记录<br>如果从表中有和它匹配的，则显示匹配的值<br>如果从表中没有和它匹配的，则显示null<br>外连接查询结果=内连接结果+主表中有而从表没有的记录</li><li>左外连接，left join左边的是主表</li><li>右外连接，right join右边的是主表</li><li>左外和右外交换两个表的顺序，可以实现同样的效果 </li><li>全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的</li></ol><pre class=" language-mysql"><code class="language-mysql"> #左外连接SELECT    b.*,    bo.* FROM    boys bo    LEFT OUTER JOIN beauty b ON b.`boyfriend_id` = bo.`id` WHERE    b.`id` IS NULL;  #案例1：查询哪个部门没有员工#左外SELECT    d.*,    e.employee_id FROM    departments d    LEFT OUTER JOIN employees e ON d.`department_id` = e.`department_id` WHERE    e.`employee_id` IS NULL;  #右外SELECT    d.*,    e.employee_id FROM    employees e    RIGHT OUTER JOIN departments d ON d.`department_id` = e.`department_id` WHERE    e.`employee_id` IS NULL;   #全外USE girls;SELECT    b.*,    bo.* FROM    beauty b    FULL OUTER JOIN boys bo ON b.`boyfriend_id` = bo.id; #交叉连接SELECT    b.*,    bo.* FROM    beauty b    CROSS JOIN boys bo;</code></pre><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><h4 id="2-7-1-概述"><a href="#2-7-1-概述" class="headerlink" title="2.7.1 概述"></a>2.7.1 概述</h4><p><strong>1. 含义</strong>：出现在其他语句中的select语句，称为子查询或内查询。外部的查询语句，称为主查询或外查询。外面的语句可以是insert、update、delete、select等，一般select作为外面语句较多，外面如果为select语句，则此语句称为外查询或主查询。</p><p><strong>2. 分类</strong>：</p><ul><li><strong>按子查询出现的位置</strong>：<br>  <strong>select后面</strong>：仅仅支持标量子查询<br>  <strong>from后面</strong>：支持表子查询<br>  <strong>where或having后面</strong>：★<br>  标量子查询（单行） √<br>  列子查询  （多行） √<br>   行子查询<br>   <strong>exists后面</strong>（相关子查询）<br>   标量子查询<br>  列子查询<br>  行子查询<br>  表子查询</li><li><strong>按结果集的行列数不同</strong>：<br> 标量子查询（结果集只有一行一列）<br> 列子查询（结果集只有一列多行）<br> 行子查询（结果集有一行多列）<br> 表子查询（结果集一般为多行多列）</li><li><strong>特点：</strong><br>①子查询放在小括号内<br>②子查询一般放在条件的右侧<br>③标量子查询，一般搭配着单行操作符使用 &gt; &lt; &gt;= &lt;= = &lt;&gt;<br> 列子查询，一般搭配着多行操作符使用<br> in（任意一个）、any/some(某一个)、all（所有）<br>④子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li></ul><h4 id="2-7-2-where或having后面"><a href="#2-7-2-where或having后面" class="headerlink" title="2.7.2   where或having后面"></a>2.7.2   where或having后面</h4><ul><li>标量子查询（单行子查询）</li><li>列子查询（多行子查询）</li><li>行子查询（多列多行）</li></ul><p><strong>特点：</strong></p><ol><li>子查询放在小括号内</li><li>子查询一般放在条件的右侧</li><li>标量子查询，一般搭配着单行操作符使用 &gt; &lt; &gt;= &lt;= = &lt;&gt;<br> 列子查询，一般搭配着多行操作符使用in、any/some、all</li><li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li></ol><p> <strong>标量子查询</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：谁的工资比 Abel 高?#①查询Abel的工资SELECT    salary FROM    employees WHERE    last_name = 'Abel'#②查询员工的信息，满足 salary>①结果SELECT    * FROM    employees WHERE    salary > ( SELECT salary FROM employees WHERE last_name = 'Abel' );#案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资#①查询141号员工的job_idSELECT    job_id FROM    employees WHERE    employee_id = 141#②查询143号员工的salarySELECT    salary FROM    employees WHERE    employee_id = 143#③查询员工的姓名，job_id 和工资，要求job_id=①并且salary>②SELECT    last_name,    job_id,    salary FROM    employees WHERE    job_id = ( SELECT job_id FROM employees WHERE employee_id = 141 )     AND salary > ( SELECT salary FROM employees WHERE employee_id = 143 );#案例3：返回公司工资最少的员工的last_name,job_id和salary#①查询公司的 最低工资SELECT    MIN( salary ) FROM    employees#②查询last_name,job_id和salary，要求salary=①SELECT    last_name,    job_id,    salary FROM    employees WHERE    salary = ( SELECT MIN( salary ) FROM employees );#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资#①查询50号部门的最低工资SELECT    MIN( salary ) FROM    employees WHERE    department_id = 50#②查询每个部门的最低工资SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id#③ 在②基础上筛选，满足min(salary)>①SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id HAVING    MIN( salary ) > ( SELECT MIN( salary ) FROM employees WHERE department_id = 50 );#非法使用标量子查询SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id HAVING    MIN( salary ) > ( SELECT salary FROM employees WHERE department_id = 250 );</code></pre><p><strong>列子查询（多行子查询）</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：返回location_id是1400或1700的部门中的所有员工姓名#①查询location_id是1400或1700的部门编号SELECT DISTINCT    department_id FROM    departments WHERE    location_id IN ( 1400, 1700 )#②查询员工姓名，要求部门号是①列表中的某一个SELECT    last_name FROM    employees WHERE    department_id <> ALL ( SELECT DISTINCT department_id FROM departments WHERE location_id IN ( 1400, 1700 ) );#案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary#①查询job_id为‘IT_PROG’部门任一工资SELECT DISTINCT    salary FROM    employees WHERE    job_id = 'IT_PROG'#②查询员工号、姓名、job_id 以及salary，salary<(①)的任意一个SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ANY ( SELECT DISTINCT salary FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#或SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ( SELECT MAX( salary ) FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#案例3：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工   的员工号、姓名、job_id 以及salarySELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ALL ( SELECT DISTINCT salary FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#或SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ( SELECT MIN( salary ) FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';</code></pre><p><strong>行子查询（结果集一行多列或多行多列）</strong></p><pre class=" language-mysql"><code class="language-mysql">#3、行子查询（结果集一行多列或多行多列）#案例：查询员工编号最小并且工资最高的员工信息SELECT    * FROM    employees WHERE    ( employee_id, salary ) = ( SELECT MIN( employee_id ), MAX( salary ) FROM employees );#①查询最小的员工编号SELECT    MIN( employee_id ) FROM    employees#②查询最高工资SELECT    MAX( salary ) FROM    employees#③查询员工信息SELECT    * FROM    employees WHERE    employee_id = ( SELECT MIN( employee_id ) FROM employees )     AND salary = ( SELECT MAX( salary ) FROM employees );</code></pre><h4 id="2-7-3-select后面"><a href="#2-7-3-select后面" class="headerlink" title="2.7.3 select后面"></a>2.7.3 select后面</h4><p><strong>仅仅支持标量子查询</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个部门的员工个数SELECT    d.*,    ( SELECT COUNT( * ) FROM employees e WHERE e.department_id = d.`department_id` ) 个数 FROM    departments d;  #案例2：查询员工号=102的部门名SELECT    (SELECT    department_name,    e.department_id FROM    departments d    INNER JOIN employees e ON d.department_id = e.department_id WHERE    e.employee_id = 102     ) 部门名;</code></pre><h4 id="2-7-4-from后面"><a href="#2-7-4-from后面" class="headerlink" title="2.7.4 from后面"></a>2.7.4 from后面</h4><p><strong>将子查询结果充当一张表，要求必须起别名</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个部门的平均工资的工资等级#①查询每个部门的平均工资SELECT    AVG( salary ),    department_id FROM    employees GROUP BY    department_id#②连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_salSELECT    ag_dep.*,    g.`grade_level` FROM    ( SELECT AVG( salary ) ag, department_id FROM employees GROUP BY department_id ) ag_dep    INNER JOIN job_grades g ON ag_dep.ag BETWEEN lowest_sal     AND highest_sal;</code></pre><h4 id="2-7-5-exists后面（相关子查询）"><a href="#2-7-5-exists后面（相关子查询）" class="headerlink" title="2.7.5 exists后面（相关子查询）"></a>2.7.5 exists后面（相关子查询）</h4><p><strong>语法：</strong> exists(完整的查询语句)    结果：1或0</p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询有员工的部门名#inSELECT    department_name FROM    departments d WHERE    d.`department_id` IN ( SELECT department_id FROM employees )#existsSELECT    department_name FROM    departments d WHERE    EXISTS ( SELECT * FROM employees e WHERE d.`department_id` = e.`department_id` );#案例2：查询没有女朋友的男神信息#inSELECT    bo.* FROM    boys bo WHERE    bo.id NOT IN ( SELECT boyfriend_id FROM beauty )#existsSELECT    bo.* FROM    boys bo WHERE    NOT EXISTS ( SELECT boyfriend_id FROM beauty b WHERE bo.`id` = b.`boyfriend_id` );</code></pre><h3 id="2-8-分页查询"><a href="#2-8-分页查询" class="headerlink" title="2.8 分页查询"></a>2.8 分页查询</h3><h4 id="2-8-1-概述"><a href="#2-8-1-概述" class="headerlink" title="2.8.1 概述"></a>2.8.1 概述</h4><p><strong>1. 应用场景</strong>：当要显示的数据，一页显示不全，需要分页提交sql请求<br><strong>2. 语法</strong>：<br>    select 查询列表<br>    from 表<br>    【join type join】 表2<br>    on 连接条件<br>    where 筛选条件<br>    group by 分组字段<br>    having 分组后的筛选<br>    order by 排序的字段】<br>    limit 【offset,】size;</p><p>offset要显示条目的起始索引（起始索引从0开始）<br>size 要显示的条目个数<br><strong>3. 特点</strong>：<br>①limit语句放在查询语句的最后<br>②公式<br>要显示的页数 page，每页的条目数size</p><p>select 查询列表<br>from 表<br>limit (page-1)*size,size;</p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询前五条员工信息SELECT    * FROM    employees     LIMIT 0,    5;        SELECT    * FROM    employees     LIMIT 5;#案例2：查询第11条——第25条SELECT    * FROM    employees     LIMIT 10,    15;#案例3：有奖金的员工信息，并且工资较高的前10名显示出来SELECT    * FROM    employees WHERE    commission_pct IS NOT NULL ORDER BY    salary DESC     LIMIT 10;</code></pre><h3 id="2-8-联合查询"><a href="#2-8-联合查询" class="headerlink" title="2.8 联合查询"></a>2.8 联合查询</h3><h4 id="2-8-1-概述-1"><a href="#2-8-1-概述-1" class="headerlink" title="2.8.1 概述"></a>2.8.1 概述</h4><p><strong>union</strong> 联合 合并：将多条查询语句的结果合并成一个结果<br>语法：<br>查询语句1<br>union<br>查询语句2<br>union<br>…<br><strong>应用场景：</strong><br>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p><p><strong>特点</strong>：★<br>1、要求多条查询语句的查询列数是一致的！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项</p><pre class=" language-mysql"><code class="language-mysql">#引入的案例：查询部门编号>90或邮箱包含a的员工信息SELECT    * FROM    employees WHERE    email LIKE '%a%'     OR department_id > 90;SELECT    * FROM    employees WHERE    email LIKE '%a%';UNIONSELECT    * FROM    employees WHERE    department_id > 90;        #案例：查询中国用户中男性的信息以及外国用户中年男性的用户信息SELECT    id,    cname FROM    t_ca WHERE    csex = '男' UNION ALLSELECT    t_id,    tname FROM    t_ua WHERE    tGender = 'male';</code></pre><h3 id="2-9-查询总结"><a href="#2-9-查询总结" class="headerlink" title="2.9 查询总结"></a>2.9 查询总结</h3><p><strong>语法：</strong><br>select 查询列表    ⑦<br>from 表1 别名       ①<br>连接类型 join 表2   ②<br>on 连接条件         ③<br>where 筛选          ④<br>group by 分组列表   ⑤<br>having 筛选         ⑥<br>order by排序列表    ⑧<br>limit 起始条目索引，条目数;  ⑨</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础知识</title>
      <link href="/2021/12/29/softwareTestingBasics/"/>
      <url>/2021/12/29/softwareTestingBasics/</url>
      
        <content type="html"><![CDATA[<h2 id="1-软件测试定义"><a href="#1-软件测试定义" class="headerlink" title="1. 软件测试定义"></a>1. 软件测试定义</h2><p>在<font color="red">规定的条件</font>下对程序进行操作，<font color="red">发现程序错误，衡量软件质量</font>，并对其是否能<font color="red">满足设计要求</font>进行评估的过程<br>规定的条件——&gt;测试用例<br>发现程序错误——-&gt;找bug<br>衡量软件质量——-&gt;质量评估<br>满足设计要求——-&gt;满足需求</p><h2 id="2-软件测试方法分类"><a href="#2-软件测试方法分类" class="headerlink" title="2. 软件测试方法分类"></a>2. 软件测试方法分类</h2><h3 id="2-1-按开发阶段划分"><a href="#2-1-按开发阶段划分" class="headerlink" title="2.1 按开发阶段划分"></a>2.1 按开发阶段划分</h3><h4 id="2-1-1-单元测试"><a href="#2-1-1-单元测试" class="headerlink" title="2.1.1 单元测试"></a>2.1.1 单元测试</h4><p>对软件测组成单位进行测试，其目的是检验软件基本组成单位的正确性。测试对象是软件测试的最小单位：模块。</p><h4 id="2-1-2-集成测试"><a href="#2-1-2-集成测试" class="headerlink" title="2.1.2 集成测试"></a>2.1.2 集成测试</h4><p>将程序模块采用适当的集成策略组装起来，对系统的接口及集成后的功能进行正确性检测的测试工作。集成主要目的是检查软件单位之间的接口是否正确。</p><h4 id="2-1-3-系统测试"><a href="#2-1-3-系统测试" class="headerlink" title="2.1.3 系统测试"></a>2.1.3 系统测试</h4><p>将软件系统看成是一个系统进行的测试。包括对功能、性能以及软件所运行的软硬件环境进行测试。 </p><h4 id="2-1-4-验收测试"><a href="#2-1-4-验收测试" class="headerlink" title="2.1.4 验收测试"></a>2.1.4 验收测试</h4><p>是部署软件之前的一个测试操作。它是技术测试的最后一个阶段，也称为交付测试。向软件购买者展示该软件系统满足原始需求。</p><h3 id="2-2-按是否手工执行划分"><a href="#2-2-按是否手工执行划分" class="headerlink" title="2.2 按是否手工执行划分"></a>2.2 按是否手工执行划分</h3><h4 id="2-2-1-手工测试"><a href="#2-2-1-手工测试" class="headerlink" title="2.2.1 手工测试"></a>2.2.1 手工测试</h4><p>   手工测试是由一个一个的输入用例，然后观察结果，和机器测试相对应，属于比较原始但是必须的一种</p><h4 id="2-2-2-自动化测试"><a href="#2-2-2-自动化测试" class="headerlink" title="2.2.2 自动化测试"></a>2.2.2 自动化测试</h4><p>   在预设条件下运行系统或应用程序，评估运行结果。（预先条件包括：正常条件和异常条件）。简单来说，自动化测试就是把人为驱动的测试行为，转化为机器执行的一种过程。</p><h3 id="2-3-按是否查看代码分"><a href="#2-3-按是否查看代码分" class="headerlink" title="2.3 按是否查看代码分"></a>2.3 按是否查看代码分</h3><h4 id="2-3-1-黑盒测试"><a href="#2-3-1-黑盒测试" class="headerlink" title="2.3.1 黑盒测试"></a>2.3.1 黑盒测试</h4><p>黑盒测试也是功能测试，测试中把被测的软件当作一个黑盒子，不关心盒子的内部结构是什么，只关心软件的输入数据和输出数据。</p><h4 id="2-3-2-白盒测试"><a href="#2-3-2-白盒测试" class="headerlink" title="2.3.2 白盒测试"></a>2.3.2 白盒测试</h4><p>白盒测试又称结构测试、透明盒测试、逻辑驱动测试或基于代码的测试。白盒测试是指打开盒子，去研究里面的源代码和程序结果。</p><h4 id="2-3-3-灰盒测试"><a href="#2-3-3-灰盒测试" class="headerlink" title="2.3.3 灰盒测试"></a>2.3.3 灰盒测试</h4><p>灰盒测试是介于白盒测试和黑盒测试之间的一种，灰盒测试多用于集成测试阶段，不仅关注输入、输出的正确性，同时也关注程序内部的情况。</p><h3 id="2-4-按是否运行划分"><a href="#2-4-按是否运行划分" class="headerlink" title="2.4 按是否运行划分"></a>2.4 按是否运行划分</h3><h4 id="2-4-1-静态测试"><a href="#2-4-1-静态测试" class="headerlink" title="2.4.1 静态测试"></a>2.4.1 静态测试</h4><p>   静态方法是指不运行被测程序本身，仅通过分析或检查源代码语法、结构、过程、接口等来检查程序的正确性，对需求说明书、软件设计说明书、源程序做结构分析、流程图分析、符号执行来找错。</p><h4 id="2-4-2-动态测试"><a href="#2-4-2-动态测试" class="headerlink" title="2.4.2 动态测试"></a>2.4.2 动态测试</h4><p>   通过运行被测程序，检查运行结果与预期结果的差异</p><h3 id="2-5-按测试对象划分"><a href="#2-5-按测试对象划分" class="headerlink" title="2.5 按测试对象划分"></a>2.5 按测试对象划分</h3><h4 id="2-5-1-非功能测试"><a href="#2-5-1-非功能测试" class="headerlink" title="2.5.1 非功能测试"></a>2.5.1 非功能测试</h4><ol><li>检查系统是否满足需求规格说明书中规定的性能<ul><li>稳定性  </li><li>响应时间</li><li>吞吐量</li><li>安全测试</li></ul></li><li>安全测试是一个相对独立的领域，需要更多的专业知识。如：WEB的安全测   试、需要熟悉各种网络协议、防火墙、CDN、数字各种操作系统的漏洞、熟悉路由器等。</li><li>兼容性测试<br> 兼容性测试主要是指软件之间能否很好的运作，会不会有影响、软件和硬件之间能否发挥很好的效率工作，会不会影响导致系统的崩溃。<ul><li>平台测试</li><li>浏览器测试</li><li>软件本身能否向前或向后兼容</li><li>测试软件能否与其他相关软件兼容</li><li>数据兼容性测试 </li></ul></li><li>文档测试<ul><li>开发文件：可行性研究报告、软件需求说明书、数据要求说明书、概要设计说明书、详细设计说明书、数据库设计说明书、模块开发卷宗。</li><li>用户文件：用户手册、操作手册，用户文档的作用：改善易安装性；改善软件的易学性与易用性；改善软件可靠性；降低技术支持成本。</li><li>管理文件：项目开发计划、测试计划、测试分析报告、开发进度月报、项目开发总结报告。<br>在实际的测试中，最常见的就是用户文件的测试，例如：用户操作说明书等。<br>文档测试关注点：<ul><li>文档的术语</li><li>文档的正确性</li><li>文档的完整性</li><li>文档的一致性</li><li>文档的易用性</li></ul></li></ul></li><li>易用性<br> 易用性是交互的适应性、功能性和有效性的集中体现。又叫用户体验测试。</li><li>界面测试(UI测试)<br> 测试用户界面的功能模块的布局是否合理、整体风格是否一致、各个控件的放置位置是否符合客户使用习惯，此外还要测试界面操作便捷性、导航简单移动，页面元素的可用性，界面文字是否正确，命名是否同意，页面是否美观，文字、图片组合是否完美等。</li><li>安装测试<br>  安装测试是指：测试程序的安装、卸载。最典型的就是APP的安装、卸载。</li></ol><h4 id="2-5-2-功能测试"><a href="#2-5-2-功能测试" class="headerlink" title="2.5.2 功能测试"></a>2.5.2 功能测试</h4><h3 id="2-6-按测试实施的组织划分"><a href="#2-6-按测试实施的组织划分" class="headerlink" title="2.6 按测试实施的组织划分"></a>2.6 按测试实施的组织划分</h3><h4 id="2-6-1-α测试"><a href="#2-6-1-α测试" class="headerlink" title="2.6.1 α测试"></a>2.6.1 α测试</h4><h4 id="2-6-2-β测试"><a href="#2-6-2-β测试" class="headerlink" title="2.6.2 β测试"></a>2.6.2 β测试</h4><p>α测试与β测试的区别：</p><ol><li>测试的场所不同：α测试是指把用户请到开发方的场所来测试，β测试是指在一个    或多个用户的场所进行测试。</li><li>α测试的环境是受开发方控制的，用户的数量相对比较少，时间比较集中。β测试的环境是不受开发方控制的，用户数量相对比较多，时间不集中。</li><li>α测试先于β测试执行。通用的软件产品需求较大规模的β测试，测试周期比较长。</li></ol><h4 id="2-6-3-第三方测试"><a href="#2-6-3-第三方测试" class="headerlink" title="2.6.3 第三方测试"></a>2.6.3 第三方测试</h4><p>介于开发方和用户方之间的组织测试</p><h3 id="2-7-按测试地域划分"><a href="#2-7-按测试地域划分" class="headerlink" title="2.7 按测试地域划分"></a>2.7 按测试地域划分</h3><h4 id="2-7-1-国际化测试"><a href="#2-7-1-国际化测试" class="headerlink" title="2.7.1 国际化测试"></a>2.7.1 国际化测试</h4><p>   软件的国际化和软件的本地化是开发面向全球不同地区用户使用的软件系统的两个过程。而本地化测试和国际化测试则是针对这类软件产品进行的测试。由于软件的全球化普及，还有软件外包行业的兴起，软件的本地化和国际化测试俨然成为了一个独特的测试专门领域。</p><h4 id="2-7-2-本地测试"><a href="#2-7-2-本地测试" class="headerlink" title="2.7.2 本地测试"></a>2.7.2 本地测试</h4><p>   之前的测试都是本地化测试。</p><h2 id="3-软件测试原则"><a href="#3-软件测试原则" class="headerlink" title="3. 软件测试原则"></a>3. 软件测试原则</h2><ol><li>测试应尽早进行，最好在需求阶段就开始接入，因为最严重的错误不外乎是系统不能满足用户的需求。</li><li>程序员(开发)应该避免检查自己的程序，软件测试应该由第三方(测试人员)来负责。</li><li>设计测试用例时应考虑到合法和不合法的输入(比如金额输入框)</li><li>在测试程序时，不仅要检验程序是否做了该做的事情，还要检验程序是否做了不该做的事情，多余的工作会带来副作用，影响程序的效率，有时会带来潜在的危害或错误。</li><li>应长期保留所有测试用例，保留测试用例有助于以后修改程序后的回归测试。</li></ol><h2 id="4-软件测试策略"><a href="#4-软件测试策略" class="headerlink" title="4. 软件测试策略"></a>4. 软件测试策略</h2><ol><li>选择测试方法<br> 选择对合适当前项目的测试方法(比如项目紧急的时候？项目频繁发版</li><li>角色与职责<br> 需要在测试策略里面明确定义各个角色，以及该角色的职责。比如项目经理，测试组长，测试工程师。</li><li>环境需求<br> 它将描述测试时需要的系统环境(软件，服务器linux，windows，数据库musql)，包括软硬件以及网络环境等待。在澄清环境需求的时候，测试组织可以识别出资源方面的风险。</li><li>风险分析<br> 影响测试过程的风险都应该尽早被识别出来，而且必须有相应的解决办法以便消除或者减轻这些风险。</li><li>测试进度评估<br> 测试进度将会评估完成测试所需要的时间。在设定进度的时候，首先需要明确测试范围(比如说这次增加一个：D模块，部分功能会影响原来已经上线的H模块的功能)，然后根据测试资源的多少来制定能被各方面认可的测试进度计划。</li><li>回归测试策略<br> 回归测试用来保证之前fix bug的代码不会影响软件的其他部分，这    样需要我们选择已经执行过的测试用例重新运行。测试人员需要找到一个方法来确    定哪些测试用例应该在回归测试中运行，用例不能太多，因为资源有限，用例也不    能太少，否则达不到必须的测试强度。</li><li>优先级<br>  测试范围内的东西不会都是一样重要的，加上测试资源各种有限，所以为测试的模块排定优先级是十分必要的。</li></ol><h2 id="5-软件测试模型"><a href="#5-软件测试模型" class="headerlink" title="5. 软件测试模型"></a>5. 软件测试模型</h2><h3 id="5-1-瀑布模型"><a href="#5-1-瀑布模型" class="headerlink" title="5.1 瀑布模型"></a>5.1 瀑布模型</h3><p>瀑布模型适用于结构化方法<br>软件项目或产品选择瀑布模型必须满足下列条件<br>在开发时间内需求没有或很少变化<br>分析设计人员应对应用领域很熟悉<br>低风险项目(对目标、环境很熟悉)<br>用户使用环境很稳定<br>用户除提出需求外，很少参与开发工作<br><img src="/2021/12/29/softwareTestingBasics/waterfallModel.png" alt="瀑布模型">   </p><h3 id="5-2-V模型"><a href="#5-2-V模型" class="headerlink" title="5.2 V模型"></a>5.2 V模型</h3><p>优点：</p><ul><li>包含底层测试(单元测试)和高层测试(系统测试)</li><li>清楚的标识了开发和测试的各个阶段；自上而下逐步求精，每个阶段分工明确，便于整体项目的把控。</li><li>V模型的价值在于它非常明确地标明了测试过程中存在的不同级别，并且清楚地描述了这些测试和开发过程期间各阶段的对应关系。<br>缺点：</li><li>自上而下的顺序导致测试工作在编码后，不能及时的进行修改；实际工作中，需求经常变化，导致V模型步骤反复执行，返工量很大，灵活度较低。</li><li>V模型和瀑布模型有一些共同的特征，V模型中的过程从左到右，描述了基本的开发过程和测试行为。</li><li>(测试介入太晚)把测试作为编码之后的最后一个活动，需求分析等前期产生的错误到后期的验收测试才能发现。<br><img src="/2021/12/29/softwareTestingBasics/VModel.png" alt="V模型"><h3 id="5-3-敏捷模型"><a href="#5-3-敏捷模型" class="headerlink" title="5.3 敏捷模型"></a>5.3 敏捷模型</h3><img src="/2021/12/29/softwareTestingBasics/agileModel.png" alt="敏捷模型"></li></ul><h3 id="5-4-探索式测试"><a href="#5-4-探索式测试" class="headerlink" title="5.4 探索式测试"></a>5.4 探索式测试</h3><p>探索性测试可以说是一种测试思维模式。它没有很多实际的测试方法、技术和工具，但是却是所有测试人员都应该掌握的一种测试思维方式。探索性强调测试人员的主观能动性，抛弃繁杂的测试计划和测试用例设计过程，强调在碰到问题时及时改变测试策略。</p><h2 id="6-软件测试生命周期"><a href="#6-软件测试生命周期" class="headerlink" title="6. 软件测试生命周期"></a>6. 软件测试生命周期</h2><p><img src="/2021/12/29/softwareTestingBasics/softwareTestLifeCycle.png" alt="软件测试生命周期"></p><h2 id="7-用例设计"><a href="#7-用例设计" class="headerlink" title="7. 用例设计"></a>7. 用例设计</h2><h3 id="7-1-等价类划分"><a href="#7-1-等价类划分" class="headerlink" title="7.1 等价类划分"></a>7.1 等价类划分</h3><p>定义：依据需求将输入划分为若干等价类，从等价类中选定一个测试用例，如果该测试用例通过，则表明整个等价类通过测试。</p><p>使用场景：对于等价类这个方法，一般适用于有无限多种输入，我们不可能完成穷举测试，等价类这个方法可以使我们用较少的测试用例尽可能多的将功能覆盖<br>无效等价类和有效等价类<br>有效等价类：有意义的输入构成的集合，对于需求规格说明书是合法的<br>无效等价类：不满足需求的集合</p><h3 id="7-2-边界值分析法"><a href="#7-2-边界值分析法" class="headerlink" title="7.2 边界值分析法"></a>7.2 边界值分析法</h3><p>定义：边界值分析法是对等价类划分方法的补充，边界值一般都是从等价类的边缘去寻找错误<br>边界值分析的基本思路：正好等于，刚刚小于，刚刚大于，边界值作为测试数据<br>特记：0/空，N/A，null是一个特殊值，我们在考虑边界值的时候同时也要考虑这个特殊值</p><h3 id="7-3-场景法"><a href="#7-3-场景法" class="headerlink" title="7.3 场景法"></a>7.3 场景法</h3><p>尽可能真实全部的模拟用户操作—订单，发货，商品状态变化<br>场景法主要基于：</p><ol><li>业务(需求)层面：对所测软件的重要功能、业务逻辑(系统要干什么，怎么去实现，这个过程)行业背景深入了解</li><li>技术层面：基于等价类划分，有效等价类—-模拟用户正确操作；无效等价类—模拟错误操作<br>核心概念<br>基本流(正确流、有效流)：模拟用户正确的操作流程<br>备选流(错误流、无效流)：模拟用户错误的操作流程</li></ol><h3 id="7-4-判定表"><a href="#7-4-判定表" class="headerlink" title="7.4 判定表"></a>7.4 判定表</h3><h3 id="7-5-因果图"><a href="#7-5-因果图" class="headerlink" title="7.5 因果图"></a>7.5 因果图</h3><p>利用因果图设计测试用例应遵循的步骤</p><ol><li>分析程序的规格说明书中哪些是原因，哪些是结果。所谓原因，是指输入条件  或输入条件的等价类，而结果是指输出条件，给每一个原因和结果赋一个标识符</li><li>分析程序规格说明书中的语义，确定原因与原因，原因与结果之间的关系，画出因果图</li><li>由于语法环境的限制，一些原因与原因之间，原因与结果之间的组合不能出现。对于这些特殊情况，在因果图中用一些记号标明约束或限制条件</li><li>将因果图转化为判定表</li><li>根据判定表的每一列设计测试用例 </li></ol><h3 id="7-6-错误推测法"><a href="#7-6-错误推测法" class="headerlink" title="7.6 错误推测法"></a>7.6 错误推测法</h3><p>定义：基于经验和直觉推测程序中所有可能存在的各种错误，从而有针对性的设计测试用例的方法<br>2-8原则   80%的问题出在20%的模块中<br>错误推测法的基本思想：列举出程序中所有可能有的错误和容易发生错误的特殊情况，根据他们选择测试用例<br>基本要素：</p><ul><li>对开发的开发习惯很熟悉</li><li>对同类型项目业务非常熟悉</li></ul><h3 id="7-7-正交试验法"><a href="#7-7-正交试验法" class="headerlink" title="7.7 正交试验法"></a>7.7 正交试验法</h3><p>正交试验是研究多因素，多水平的一种试验法，它是利用正交表来对试验进行设计，通过少数的试验替代全面试验，根据正交表的正交性从全面试验中挑选适量的、有代表性的点进行试验，这些有代表性的点具备了均匀分散，整齐可比的特点。因素之间互不影响。</p><h2 id="8-需求澄清"><a href="#8-需求澄清" class="headerlink" title="8. 需求澄清"></a>8. 需求澄清</h2><h3 id="8-1-需求阶段位置"><a href="#8-1-需求阶段位置" class="headerlink" title="8.1 需求阶段位置"></a>8.1 需求阶段位置</h3><p>需求是软件项目研发的开始<br>需求是组件研发团队后第一次集体参与讨论的事情<br>需求是保障质量的最重要的一环</p><h3 id="8-2-需求会议"><a href="#8-2-需求会议" class="headerlink" title="8.2 需求会议"></a>8.2 需求会议</h3><h2 id="9-测试计划"><a href="#9-测试计划" class="headerlink" title="9. 测试计划"></a>9. 测试计划</h2><p>软件测试是有计划，有组织和由系统的软件质量保证活动，而不是随意地，松散的、杂乱地实施过程。为了规范软件测试内容、方法和过程，在对软件进行测试之前，必须创建测试计划。<br>测试计划：一个叙述了预定地测试活动地范围(哪些模块)、测试资源(软件、硬件)及进度安排的文档。它确认了测试项、被测特征、测试任务、人员安排，以及任何偶发事件的风险。<br>包含了产品概述、测试策略、测试方法、测试范围、事件安排、测试人力、风险分析等内容。<br>为什么要写测试计划</p><ol><li>使软件测试工作进行更顺利：计划使我们软件测试工作的预先安排，为我们的整个测试工作指明方向(该怎么进行，什么时候进行)</li><li>促进项目参加人员彼此的沟通：测试人员能够了解整个项目测试情况以及项目测试不同阶段的所有要进行的工作等。这种形式使测试工作与开发工作紧密联系起来。</li><li>使软件测试工作更易于管理：领导能够根据测试计划做宏观调控，进行相应的资源配置等；其他人员了解测试人员的工作内容，进行有关配合工作。按照这种方式，资源与变更变成了一个可控制的风险。<br>什么时候开始编写测试计划：确定什么事件开始做测试计划使很重要的，一般来说是测试需求分析完成之后开始。<br>谁编写测试计划：编写测试计划是一项系统工作，编写者必须对项目了解，对测试工作所接触到的方方面面都要有系统地把握。因此一般情况下是由具有丰富经验地项目测试负责人或者测试负责人进行编写。<br>测试计划编写原则：</li><li>制定测试计划应尽早开始：越早进行测试计划，从最根本地地方去了解我们所要测试的对象及内容，方便后续完善测试计划</li><li>保持测试计划简介和易读：测试计划做出来后应该能够让测试人员明了自己的任务和计划</li><li>尽量争取多渠道评审测试嘉华：通过不同的人来发现测试计划中的不足及缺陷，可以很好的改进测试计划的质量</li><li>计算测试的投入：投入到测试中的项目经费是一定的，我们指定测试计划时一定要注意测试计划的费用情况，要量力而行</li></ol><h2 id="10-BUG"><a href="#10-BUG" class="headerlink" title="10 BUG"></a>10 BUG</h2><h3 id="10-1-Bug的定义"><a href="#10-1-Bug的定义" class="headerlink" title="10.1 Bug的定义"></a>10.1 Bug的定义</h3><p>电脑程序里的错误，而现在更是将其延生为漏洞，错误，可改进的细节、或与需求文档存在差异的功能实现等。</p><p><img src="/2021/12/29/softwareTestingBasics/bugTrackingProcess.png" alt="bug跟踪流程"></p><h3 id="10-2-BUG的分类"><a href="#10-2-BUG的分类" class="headerlink" title="10.2 BUG的分类"></a>10.2 BUG的分类</h3><ol><li>代码错误（错误页404、500）</li><li>界面优化（UI问题，图文显示）</li><li>安装部署（安装失败，无法访问等）</li><li>性能问题（响应时间久，加载慢）</li><li>安全相关（密码：123456 ****）</li><li>其他划分（易用性、兼容性类）</li><li>设计缺陷（需求问题）</li></ol><h3 id="10-3-Bug的严重程度"><a href="#10-3-Bug的严重程度" class="headerlink" title="10.3 Bug的严重程度"></a>10.3 Bug的严重程度</h3><ol><li>致命的–最高<br> 系统崩溃（请求直接把服务器搞坏）、死机、死循环，导致数据库数据丢失，与数  据库连接错误，主要功能丧失，基本模块缺失，重要的以及菜单功能不能使用等。</li><li>严重的–高<br>系统主要功能部分丧失、数据库保存，提交调用错误，功能设计与需求严重不符，自动退出，稳定性差，数值计算统计错误等（该等级问题出现在不影响其他功能测试的情况下可以继续该版本）</li><li>一般的–中<br> 功能菜单没有完全实现存在缺陷但不会影响系统稳定性。如：操作时间长、查询时间长、格式错误、边界条件错误，删除没有确认框、数据库表中字段过多等（该问题实际测试中存在最多）</li><li>轻微的–低<br> 兼容性，界面优化，不影响操作功能的执行，错别字，页面显示重叠，提示语丢失（此类问题在测试初期较多，优先程度较低）登录</li><li>建议性–低</li></ol><h3 id="10-4-BUG优先级"><a href="#10-4-BUG优先级" class="headerlink" title="10.4 BUG优先级"></a>10.4 BUG优先级</h3><p>非常紧急、紧急、一般、不重要</p><h3 id="10-5-BUG的状态标准"><a href="#10-5-BUG的状态标准" class="headerlink" title="10.5 BUG的状态标准"></a>10.5 BUG的状态标准</h3><ol><li>待处理（提交–激活）<br>测试人员或用户发现新问题后提交的状态</li><li>已确认<br>经测试人员及研发人员讨论后确认是bug，提交的状态，由开发点击确认按钮</li><li>已处理=已解决<br>经研发人员确认是bug后修复的状态，修改还没有验证，有开发人员来设置</li><li>已修改=已关闭—–最终的bug状态<br>测试人员认为问题已经修改，通过验证，有测试人员设置</li><li>任存在=重新打开<br>测试人员认为bug未修复成功，问题任然存在，有测试人员设置</li><li>不是bug<br>研发人员确认不是bug，或者建议与意见决定不采纳，由开发人员设置</li><li>暂不处理=挂起<br>当前版本不做修改，后续版本再考虑，或者一时不确定是解决不解决，需要过一两天来决定，这样的bug就需要一个挂起状态由研发人员或测试人员设置。</li></ol><h3 id="10-6-如何创建一个高质量的BUG"><a href="#10-6-如何创建一个高质量的BUG" class="headerlink" title="10.6 如何创建一个高质量的BUG"></a>10.6 如何创建一个高质量的BUG</h3><ol><li>标题：主要简明扼要地描述了bug，可以让人快速的了解问题</li><li>测试环境：什么环境下发现的，软件和硬件系统，什么版本，如果需要，还应注明那个，硬件平台</li><li>前提条件：用户测试步骤前的系统环境信息（bug在什么环境或者设置下出现）</li><li>测试步骤：在执行什么操作时，发现问题</li><li>实际结果：在测试软件的过程中，软件本身表现出的结果，可能与预期结果有出入</li><li>预期结果：软件设计所要求达到的需求本身达到的目的，预期目标</li><li>附件—主要</li></ol><h3 id="10-7-怎样与开发沟通"><a href="#10-7-怎样与开发沟通" class="headerlink" title="10.7 怎样与开发沟通"></a>10.7 怎样与开发沟通</h3><ol><li>确保自己提交的是个bug，并且能重现这个bug</li><li>如果开发有疑问，或者说没有问题的时候，我们可以从用户的角度解释使用系统时，用户的操作怎样的不便一</li><li>Bug步骤需要写清楚，或者描述清楚，开发人员在了解问题所在后，可以准确定位</li><li>跟研发确认清楚，修改这块后，主要影响哪里，会对其他模块有影响没，有的话，我们需要重新关注</li></ol><h2 id="11-APP测试-专项测试"><a href="#11-APP测试-专项测试" class="headerlink" title="11. APP测试-专项测试"></a>11. APP测试-专项测试</h2><h3 id="11-1-安装测试"><a href="#11-1-安装测试" class="headerlink" title="11.1 安装测试"></a>11.1 安装测试</h3><ol><li>软件在不同操作系统下安装是否正常</li><li>软件安装后是否能够正常运行，安装后的文件及文件夹是否写到了指定的目录里</li><li>软件安装各个选项的组合是否符合概要设计说明</li><li>软件安装向导的UI测试</li><li>软件安装过程是否可以取消，点击取消后，写入的文件是否如概要设计说明处理</li><li>软件安装过程中意外情况的处理是否符合需求（如死机，重启，断电）</li><li>安装空间不足时是否有相应提示—-特殊极限</li><li>对于需要通过网络验证之类的安装，在断网情况下尝试一下（点点头，眨眨眼）</li><li>对安装手册进行测试，依照安装手册是否能顺利安装（官网帮助手册）</li><li>二次安装（覆盖重新安装）</li><li>浏览器下载.apk安装（app安装包传到手机安装）</li></ol><h3 id="11-2-卸载测试"><a href="#11-2-卸载测试" class="headerlink" title="11.2 卸载测试"></a>11.2 卸载测试</h3><ol><li>直接删除安装文件夹卸载是否有提示信息</li><li>测试系统直接卸载程序是否有提示信息</li><li>卸载过程中出现的意外情况的测试（如死机、断电、重启）</li><li>卸载是否支持取消功能，单击取消后软件卸载的情况</li><li>系统直接卸载UI测试，是否有卸载状态进度条提示 </li></ol><h3 id="11-3-导航测试"><a href="#11-3-导航测试" class="headerlink" title="11.3 导航测试"></a>11.3 导航测试</h3><ol><li>按钮、对话框、列表和窗口等；或在不同的连接页面之间需要导航</li><li>是否易于导航，导航是否直观</li><li>是否需要搜索引擎</li><li>导航与页面结构、菜单、连接页面的风格是否一致</li></ol><h3 id="11-4-图形测试"><a href="#11-4-图形测试" class="headerlink" title="11.4 图形测试"></a>11.4 图形测试</h3><ol><li>横向比较。各控件操作方式统一</li><li>自适应界面设计，内容根据窗口大小自适应</li><li>页面标签风格是否统一</li><li>页面是否美观</li><li>页面的图片应有其实际以及而要求整体有序美观</li><li>图片质量要高且图片尺寸在设计符合要求的情况下应尽量小</li><li>界面整体使用的颜色不宜过多</li></ol><h3 id="11-5-内容测试"><a href="#11-5-内容测试" class="headerlink" title="11.5 内容测试"></a>11.5 内容测试</h3><ol><li>输入框说明文字的内容与系统功能是否一致</li><li>文字长度是否加以限制</li><li>文字内容是否表意不明</li><li>是否有错别字，敏感词</li><li>是否有敏感性图片，如：设计版权、专利、隐私等图片</li></ol><h3 id="11-6-运行测试"><a href="#11-6-运行测试" class="headerlink" title="11.6 运行测试"></a>11.6 运行测试</h3><ol><li>App安装完成后的试运行，可以正常打开软件</li><li>App打开测试，是否有加载状态进度提示</li><li>App打开速度测试，速度是否客观</li><li>App页面间的切换是否流畅，逻辑是否正确</li></ol><h3 id="11-7-APP更新升级"><a href="#11-7-APP更新升级" class="headerlink" title="11.7 APP更新升级"></a>11.7 APP更新升级</h3><ol><li>当客户端有新版本时，有更新提示</li><li>当版本为非强制升级版时，用户可以取消更新，老版本能正常使用。用户在下次启动app时，仍能出现更新提示</li><li>当版本为强制升级版时，当给出强制更新后用户没有做更新时，退出客户端。下次启动app时，仍出现轻质升级提示</li><li>当客户端有新版本时，在本地不删除客户端的情况下，直接更新兼差是否能正常更新</li><li>当客户端有新版本时，在本地删除客户端的情况下，检查更新后的客户端功能是否是新版本</li><li>当客户端有新版本时，在本地不删除客户端的情况下，检查资源同名文件如图片是否能正常更新最新版本</li></ol><h3 id="11-8-交叉时间测试"><a href="#11-8-交叉时间测试" class="headerlink" title="11.8 交叉时间测试"></a>11.8 交叉时间测试</h3><ol><li>多个App同事运行是否影响正常功能</li><li>App运行时前后台切换是否影响功能</li><li>App运行时拨打/接听电话</li><li>App运行时发送/接受信息</li><li>App运行时发送/接受邮件</li><li>App运行时切换网络（2G、3G、4G、5G、wifi）</li><li>App运行时浏览网页</li><li>App运行时使用蓝牙传送/接受数据</li><li>App运行时使用相机、计算器等手机自带设备</li></ol><h3 id="11-9-兼容性测试"><a href="#11-9-兼容性测试" class="headerlink" title="11.9 兼容性测试"></a>11.9 兼容性测试</h3><ol><li>系统版本兼容性测试（ios、android、鸿蒙）</li><li>设备兼容性测试（华为、荣耀、苹果、小米、三星、魅族、诺基亚等等）</li><li>分辨率兼容性测试（720p（720<em>1280），1080p（1080</em>1920），2K（2560*1440）） </li><li>埋点–自有埋点，第三方埋点</li></ol><h3 id="11-10-用户体验测试"><a href="#11-10-用户体验测试" class="headerlink" title="11.10 用户体验测试"></a>11.10 用户体验测试</h3><p>以主观的普通消费者的角度去感知产品或服务的舒适、有用、易用、友好亲切程度。通过不同个体、独立空间和非经验的统计服用方式去有效评价产品的体验特性提出修改意见提升产品潜在的客户满意度。</p><ol><li>是否有空数据界面设计，引导用户去执行操作</li><li>是否滥用用户引导</li><li>是否有不可点击的小幅哦，如：你的按钮此时处于不可用状态，那么一定要灰掉，或者拿掉按钮，否则会给用户误导</li><li>菜单层次是否太深</li><li>交互流程分支是否太多</li><li>界面中按钮可点击范围是否适中</li><li>标签页是否跟内容没有从属关系，当切换标签的时候，内容跟着切换</li><li>是否定义back的逻辑。设计软硬件交互时，back应具体定义</li><li>是否有横屏模式的设计，应用一般需要支持横屏模式，即自适应设计</li></ol><h3 id="11-11-手势操作测试"><a href="#11-11-手势操作测试" class="headerlink" title="11.11 手势操作测试"></a>11.11 手势操作测试</h3><ol><li>手机锁屏对运行中的App的影响</li><li>切换网络对运行中的App的影响</li><li>运行中的App前后台切换的影响</li><li>多个运行中的App的切换</li><li>App运行时关机</li><li>App运行时重启系统</li><li>App运行时充电</li><li>App运行时kill掉进程再打开</li></ol><h3 id="11-12-网络环境测试"><a href="#11-12-网络环境测试" class="headerlink" title="11.12 网络环境测试"></a>11.12 网络环境测试</h3><p>手机的网络目前主要分为3G、4G、5G、wifi。目前3G的网络相较于比较慢，测试时尤其要注意此块的测试。</p><ol><li>无网络时，执行需要网络的操作，给予友好提示</li><li>在网络信号不好时，检查功能状态是否正常，确保不因提交数据失败而造成数据丢失</li><li>在网络信号不好时，检查数据是否会一直处于提交中的状态，有无超时限制。如遇数据交换失败时要给予提示</li><li>在网络信号不好时，执行操作后，在回调没有完成的情况下，退出本页面或者执行其他操作的情况，有无异常情况。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建(一)   雏形</title>
      <link href="/2021/12/28/blogSetUp/"/>
      <url>/2021/12/28/blogSetUp/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github Pages搭建博客的前期工作。拥有一个Github账号(Github是代码托管平台)。安装Git(一座通向GitHub的桥梁。我们可以通过git把本地项目上传到GitHub，同时也可以通过git从GitHub上取项目到本地。)；安装Hexo(我们的个人博客网站的框架),安装Node.JS</p><h2 id="一、注册一个Github账号"><a href="#一、注册一个Github账号" class="headerlink" title="一、注册一个Github账号"></a>一、注册一个Github账号</h2><p>  点击<a href="https://github.com/">Github</a>访问Github官网，点击Sign up进行注册，在新的页面输入要求的信息即可<br>   <img src="/2021/12/28/blogSetUp/1.png"></p><h2 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h2><ol><li>点击<a href="https://git-scm.com/downloads">Git官网</a>进入官网，根据自己的电脑环境选择对应的版本。<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装教程</a></li><li>按下Win+R输入cmd打开运行窗口，输入<code>git --version </code>测试Git是否安装成功，若出现Git版本信息则安装成功</li><li>配置Git个人信息<ul><li>输入<code>git config --global user.name &quot;name&quot; </code> name=你注册Github时的名字</li><li>输入<code>git config --global user.email  &quot;Email&quot; </code> Email=你注册Github时的邮箱<br><img src="/2021/12/28/blogSetUp/9.png"></li></ul></li></ol><h2 id="三、安装Node-js"><a href="#三、安装Node-js" class="headerlink" title="三、安装Node.js"></a>三、安装Node.js</h2><ol><li>点击<a href="https://nodejs.org/en/download/">nodejs</a>进入官网，按自己电脑的环境选择对应的版本即可。<a href="https://blog.csdn.net/muzidigbig/article/details/80493880">安装教程</a></li><li>按下Win+R输入cmd打开运行窗口，输入<code>node -v</code>，<code>npm -v</code>若出现版本信息则安装成功</li></ol><h2 id="四、安装Hexo"><a href="#四、安装Hexo" class="headerlink" title="四、安装Hexo"></a>四、安装Hexo</h2><ol><li>在你想要存放博客的地方创建一个文件夹，例如F:\Blog</li><li>右键F:\Blog文件夹，点击Git Bash Here</li><li>输入<code>npm install hexo-cli -g</code>安装Hexo<br>   <img src="/2021/12/28/blogSetUp/10.png"></li><li>输入<code>npm install hexo-deployer-git --save </code>安装的Hexo部署到git page的deployer<br>   <img src="/2021/12/28/blogSetUp/11.png"></li></ol><h2 id="五、Hexo初始化配置"><a href="#五、Hexo初始化配置" class="headerlink" title="五、Hexo初始化配置"></a>五、Hexo初始化配置</h2><ol><li>在F:\Blog下新建一个名为Hexo的空文件夹，右键Hexo文件夹，点击Git Bash Here，输入<br><code>hexo init</code></li><li>Hexo文件夹如下所示<br><img src="/2021/12/28/blogSetUp/13.png"></li><li>右键Hexo文件夹，选择Git Bash Here输入<code>hexo g</code>，<code>hexo s</code></li><li>登录 <a href="http://localhost:4000/">http://localhost:4000/</a>，出现下图所示则初始化配置成功<br> <img src="/2021/12/28/blogSetUp/14.png"></li></ol><h2 id="六、创建代码库"><a href="#六、创建代码库" class="headerlink" title="六、创建代码库"></a>六、创建代码库</h2><ol><li>登录Github，点击头像，在下拉列表选择Your repositories进入代码库</li><li>点击右上角的New创建新的代码库<br><img src="/2021/12/28/blogSetUp/2.png"><br><img src="/2021/12/28/blogSetUp/3.png"></li></ol><h2 id="七、配置SSH秘钥"><a href="#七、配置SSH秘钥" class="headerlink" title="七、配置SSH秘钥"></a>七、配置SSH秘钥</h2><ol><li><p>生成SSH秘钥</p><ul><li>在你想要存放博客的地方创建一个文件夹，例如F:\Blog</li><li>右键Blog文件夹，点击Git Bash Here</li><li><code> ssh-keygen -t rsa -C &quot;Email&quot;</code>  Email=你刚才注册Github的邮箱</li><li>之后出现<br><code> Generating public/private rsa key pair.     Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</code>直接回车</li><li>接下来出现<br> <code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.</code><br>  <code> Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</code><br>  <code>The key fingerprint is:</code><br>   <code> The key&#39;s randomart image is:</code> </li></ul></li><li><p>在Github添加秘钥</p><ul><li>登录Github，右键头像，在下拉框选择Settings</li><li>在页面的左侧菜单选择SSH and GPG keys<br>   <img src="/2021/12/28/blogSetUp/4.png"></li><li>选择New SSH key<br>   <img src="/2021/12/28/blogSetUp/5.png"></li><li>粘贴你的秘钥，秘钥在C:\Users\你的电脑名字.ssh\id_rsa.pub，秘钥为该文件的全部内容。该文件是隐藏文件<br>  <img src="/2021/12/28/blogSetUp/6.png"></li><li>测试，输入<code>ssh -T git@github.com</code>之后若显示<br> <img src="/2021/12/28/blogSetUp/7.png"><br> 输入yes即可，若出现下图所示，表示配置成功<br>   <img src="/2021/12/28/blogSetUp/8.png"></li></ul></li></ol><h2 id="八、将Hexo文件更新到Github中"><a href="#八、将Hexo文件更新到Github中" class="headerlink" title="八、将Hexo文件更新到Github中"></a>八、将Hexo文件更新到Github中</h2><ol><li>登录自己的Github，打开自己刚才建立的仓库，复制地址如下图所示<br>   <img src="/2021/12/28/blogSetUp/15.png"></li><li>修改配置信息<ul><li>打开F:\Blog\Hexo文件的_config.xml</li><li>找到如下所示信息，进行修改<br>type: git          repository: 刚才复制的地址     branch: 见图<br><img src="/2021/12/28/blogSetUp/16.png"> <img src="/2021/12/28/blogSetUp/17.png"><br><font color="#F44336">踩过的坑：</font> branch的值与Github不一致，导致上传至Github失败</li></ul></li><li>测试是否可以部署<ul><li>右键F:\Blog\Hexo，点击Git Bash Here</li><li>输入<code>hexo g </code>，<code>hexo s </code>，<code>hexo g -d</code>，</li><li>若出现下面的情况说明deployer没有安装成功，那我们需要输入<code>npm install hexo-   deployer-git --save </code>再次安装，再输入<code>hexo g -d</code>，若没有则跳过此步骤</li><li>在浏览器输入https://你的用户名.github.io，就会出现创建仓库时的readme内容</li></ul></li></ol><hr><p>参考文章<a href="https://itrhx.blog.csdn.net/article/details/82121420">https://itrhx.blog.csdn.net/article/details/82121420</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
