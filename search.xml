<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL基础知识（一）</title>
      <link href="/2021/12/30/MySQLBasics/"/>
      <url>/2021/12/30/MySQLBasics/</url>
      
        <content type="html"><![CDATA[<h2 id="1-与MySQL的第一次亲密接触"><a href="#1-与MySQL的第一次亲密接触" class="headerlink" title="1. 与MySQL的第一次亲密接触"></a>1. 与MySQL的第一次亲密接触</h2><h3 id="1-1-数据库的相关概念"><a href="#1-1-数据库的相关概念" class="headerlink" title="1.1 数据库的相关概念"></a>1.1 数据库的相关概念</h3><h4 id="1-1-1-数据库的好处"><a href="#1-1-1-数据库的好处" class="headerlink" title="1.1.1 数据库的好处"></a>1.1.1 数据库的好处</h4><p>(1) 可以持久化数据到本地<br>(2) 结构化查询</p><h4 id="1-1-2-数据库的常见概念"><a href="#1-1-2-数据库的常见概念" class="headerlink" title="1.1.2 数据库的常见概念"></a>1.1.2 数据库的常见概念</h4><p>(1) DB：数据库，存储数据的容器<br>(2) DBMS：数据库管理系统，又称为数据库软件或数据库产品，用于创建或管理DB<br>(3) SQL：结构化查询语言，用于和数据库通信的语言，不是某个数据库软件特有的，而是几乎所有的主流数据库软件通用的语言</p><h4 id="1-1-3-数据库存储数据的特点"><a href="#1-1-3-数据库存储数据的特点" class="headerlink" title="1.1.3 数据库存储数据的特点"></a>1.1.3 数据库存储数据的特点</h4><p>(1) 数据存放到表中，然后表再放到库中<br>(2) 一个库中可以有多张表，每张表具有唯一的表名用来标识自己<br>(3) 表中有一个或多个列，列又称为“字段”，相当于java中“属性”<br>(4) 表中的每一行数据，相当于java中“对象”</p><h4 id="1-1-4-常见的数据库管理系统"><a href="#1-1-4-常见的数据库管理系统" class="headerlink" title="1.1.4 常见的数据库管理系统"></a>1.1.4 常见的数据库管理系统</h4><p>mysql、oracle、db2、sqlserver</p><h3 id="1-2-MySQL的介绍"><a href="#1-2-MySQL的介绍" class="headerlink" title="1.2 MySQL的介绍"></a>1.2 MySQL的介绍</h3><h4 id="1-2-1-MySQL的背景"><a href="#1-2-1-MySQL的背景" class="headerlink" title="1.2.1 MySQL的背景"></a>1.2.1 MySQL的背景</h4><p>前身属于瑞典的一家公司，MySQL AB<br>08年被sun公司收购<br>09年sun被oracle收购</p><h4 id="1-2-2-MySQL的优点"><a href="#1-2-2-MySQL的优点" class="headerlink" title="1.2.2 MySQL的优点"></a>1.2.2 MySQL的优点</h4><p>(1) 开源、免费、成本低<br>(2) 性能高、移植性也好<br>(3) 体积小，便于安装</p><h4 id="1-2-3-MySQL的安装"><a href="#1-2-3-MySQL的安装" class="headerlink" title="1.2.3 MySQL的安装"></a>1.2.3 MySQL的安装</h4><p>属于c/s架构的软件，一般来讲安装服务端<br>企业版<br>社区版<br>5.5  5.6   5.7 8.0</p><h4 id="1-2-4-MySQL服务的启动和停止"><a href="#1-2-4-MySQL服务的启动和停止" class="headerlink" title="1.2.4 MySQL服务的启动和停止"></a>1.2.4 MySQL服务的启动和停止</h4><p>(1) 通过命令行</p><ul><li>net start 服务名</li><li>net stop 服务名</li></ul><p>(2) 计算机——右击——管理——服务</p><h4 id="1-2-5-MySQL服务的登录和退出"><a href="#1-2-5-MySQL服务的登录和退出" class="headerlink" title="1.2.5 MySQL服务的登录和退出"></a>1.2.5 MySQL服务的登录和退出</h4><p>登录：mysql  -h主机名  -P端口号   -u用户名  -p密码<br>退出：exit或ctrl+c</p><h2 id="2-DQL语言"><a href="#2-DQL语言" class="headerlink" title="2. DQL语言"></a>2. DQL语言</h2><h3 id="2-1-基础查询"><a href="#2-1-基础查询" class="headerlink" title="2.1 基础查询"></a>2.1 基础查询</h3><h4 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h4><p>语法：select  查询列表  from  表名;<br>类似于：System.out.println(打印东西)<br>特点：</p><ul><li>查询列表可以是字段、常量、表达式、函数</li><li>查询结果是一个虚拟表</li></ul><h4 id="2-2-2查询单个字段"><a href="#2-2-2查询单个字段" class="headerlink" title="2.2.2查询单个字段"></a>2.2.2查询单个字段</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    last_name FROM    employees;</code></pre><h4 id="2-2-3-查询多个字段"><a href="#2-2-3-查询多个字段" class="headerlink" title="2.2.3 查询多个字段"></a>2.2.3 查询多个字段</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    last_name,    salary,    email FROM    employees;</code></pre><h4 id="2-2-4-查询所有字段"><a href="#2-2-4-查询所有字段" class="headerlink" title="2.2.4 查询所有字段"></a>2.2.4 查询所有字段</h4><pre class=" language-MySQL"><code class="language-MySQL">#方式一：SELECT    `employee_id`,    `first_name`,    `last_name`,    `phone_number`,    `last_name`,    `job_id`,    `phone_number`,    `job_id`,    `salary`,    `commission_pct`,    `manager_id`,    `department_id`,    `hiredate` FROM    employees;        #方式二：  SELECT    * FROM    employees;</code></pre><h4 id="2-2-5-查询常量"><a href="#2-2-5-查询常量" class="headerlink" title="2.2.5 查询常量"></a>2.2.5 查询常量</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    100;        SELECT    'john';</code></pre><h4 id="2-2-6-查询表达式"><a href="#2-2-6-查询表达式" class="headerlink" title="2.2.6 查询表达式"></a>2.2.6 查询表达式</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    100 % 98;</code></pre><h4 id="2-2-7-查询函数"><a href="#2-2-7-查询函数" class="headerlink" title="2.2.7 查询函数"></a>2.2.7 查询函数</h4><pre class=" language-MySQL"><code class="language-MySQL">SELECT    VERSION( );</code></pre><h4 id="2-2-8-起别名"><a href="#2-2-8-起别名" class="headerlink" title="2.2.8 起别名"></a>2.2.8 起别名</h4><pre class=" language-MySQL"><code class="language-MySQL"> #方式一：使用asSELECT    100 % 98 AS 结果;SELECT    last_name AS 姓,    first_name AS 名 FROM    employees;#方式二：使用空格SELECT    last_name 姓,    first_name 名 FROM    employees;#案例：查询salary，显示结果为 out putSELECT    salary AS "out put" FROM    employees;</code></pre><h4 id="2-2-9-去重"><a href="#2-2-9-去重" class="headerlink" title="2.2.9 去重"></a>2.2.9 去重</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例：查询员工表中涉及到的所有的部门编号SELECT DISTINCT    department_id FROM    employees;</code></pre><h4 id="2-2-10-号的作用"><a href="#2-2-10-号的作用" class="headerlink" title="2.2.10 +号的作用"></a>2.2.10 +号的作用</h4><pre class=" language-MySQL"><code class="language-MySQL">/*java中的+号：①运算符，两个操作数都为数值型②连接符，只要有一个操作数为字符串mysql中的+号：仅仅只有一个功能：运算符select 100+90; 两个操作数都为数值型，则做加法运算select '123'+90;只要其中一方为字符型，试图将字符型数值转换成数值型            如果转换成功，则继续做加法运算select 'john'+90;    如果转换失败，则将字符型数值转换成0select null+10; 只要其中一方为null，则结果肯定为null*/#案例：查询员工名和姓连接成一个字段，并显示为 姓名SELECT    CONCAT( 'a', 'b', 'c' ) AS 结果;SELECT    CONCAT( last_name, first_name ) AS 姓名 FROM    employees;</code></pre><h3 id="2-2-条件查询"><a href="#2-2-条件查询" class="headerlink" title="2.2 条件查询"></a>2.2 条件查询</h3><h4 id="2-2-1-概述-1"><a href="#2-2-1-概述-1" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h4><p><strong>语法：</strong><br>    select 查询列表<br>    from 表名<br>    where 筛选条件</p><p><strong>筛选条件分类</strong></p><ul><li>按条件表达式筛选   &lt;     &gt;     =     &lt;&gt;     !=     &gt;=     &lt;=     &lt;=&gt;</li><li>按逻辑表达式筛选   and     or    not </li><li>模糊查询   like   between…and…   in   (is null/is not null)<br>is null：仅仅可以判断null值<br>&lt;=&gt;:   既可以判断null值又可以判断普通的数值<table><thead><tr><th></th><th>普通类型的数值</th><th>null值</th><th>可读性</th></tr></thead><tbody><tr><td>is null</td><td>×</td><td>√</td><td>√</td></tr><tr><td>&lt;=&gt;</td><td>√</td><td>√</td><td>×</td></tr></tbody></table></li></ul><h4 id="2-2-2按条件表达式筛选"><a href="#2-2-2按条件表达式筛选" class="headerlink" title="2.2.2按条件表达式筛选"></a>2.2.2按条件表达式筛选</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例1：查询工资>12000的员工信息SELECT     *FROM    employeesWHERE    salary>12000;        #案例2：查询部门编号不等于90号的员工名和部门编号SELECT     last_name,    department_idFROM    employeesWHERE    department_id<>90;</code></pre><h4 id="2-2-3-按逻辑表达式筛选"><a href="#2-2-3-按逻辑表达式筛选" class="headerlink" title="2.2.3 按逻辑表达式筛选"></a>2.2.3 按逻辑表达式筛选</h4><pre class=" language-MySQL"><code class="language-MySQL">#案例1：查询工资z在10000到20000之间的员工名、工资以及奖金SELECT    last_name,    salary,    commission_pct FROM    employees WHERE    salary >= 10000     AND salary <= 20000;        #案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息SELECT    *FROM    employeesWHERE    NOT(department_id>=90 AND  department_id<=110) OR salary>15000;</code></pre><h4 id="2-2-4-模糊查询"><a href="#2-2-4-模糊查询" class="headerlink" title="2.2.4 模糊查询"></a>2.2.4 模糊查询</h4><pre class=" language-MySQL"><code class="language-MySQL">/***like****************//*特点：①一般和通配符搭配使用    通配符：    % 任意多个字符,包含0个字符    _ 任意单个字符*/#案例1：查询员工名中包含字符a的员工信息select     *from    employeeswhere    last_name like '%a%';#案例2：查询员工名中第三个字符为e，第五个字符为a的员工名和工资select    last_name,    salaryFROM    employeesWHERE    last_name LIKE '__n_l%';#案例3：查询员工名中第二个字符为_的员工名SELECT    last_nameFROM    employeesWHERE    last_name LIKE '_$_%' ESCAPE '$';/****between and *********//*①使用between and 可以提高语句的简洁度②包含临界值③两个临界值不要调换顺序*/#案例1：查询员工编号在100到120之间的员工信息SELECT    * FROM    employees WHERE    employee_id >= 120     AND employee_id <= 100;SELECT    *FROM    employeesWHERE    employee_id BETWEEN 120 AND 100;/***********in***********//*含义：判断某字段的值是否属于in列表中的某一项特点：    ①使用in提高语句简洁度    ②in列表的值类型必须一致或兼容    ③in列表中不支持通配符*/#案例：查询员工的工种编号是 IT_PROG、AD_VP、AD_PRES中的一个员工名和工种编号SELECT    last_name,    job_id FROM    employees WHERE    job_id = 'IT_PROT'     OR job_id = 'AD_VP'     OR JOB_ID = 'AD_PRES';SELECT    last_name,    job_id FROM    employees WHERE    job_id IN ( 'IT_PROT', 'AD_VP', 'AD_PRES' );    /******is null***********************//*=或<>不能用于判断null值is null或is not null 可以判断null值*/#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct IS NULL;#案例1：查询有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct IS NOT NULL;    #----------以下为×SELECT    last_name,    commission_pctFROM    employeesWHERE     salary IS 12000;    #安全等于  <=>#案例1：查询没有奖金的员工名和奖金率SELECT    last_name,    commission_pctFROM    employeesWHERE    commission_pct <=>NULL;    #案例2：查询工资为12000的员工信息SELECT    last_name,    salaryFROM    employeesWHERE     salary <=> 12000;</code></pre><h3 id="2-3-排序查询"><a href="#2-3-排序查询" class="headerlink" title="2.3 排序查询"></a>2.3 排序查询</h3><h4 id="2-3-1-概述"><a href="#2-3-1-概述" class="headerlink" title="2.3.1 概述"></a>2.3.1 概述</h4><p><strong>语法：</strong><br>select 查询列表<br>from 表<br>where 筛选条件<br>order by 排序列表 【asc}desc】<br><strong>特点：</strong></p><ul><li>asc ：升序，如果不写默认升序<br>   desc：降序</li><li>排序列表 支持 单个字段、多个字段、函数、表达式、别名</li><li>order by的位置一般放在查询语句的最后（除limit语句之外）</li></ul><h4 id="2-3-2-按单个字段排序"><a href="#2-3-2-按单个字段排序" class="headerlink" title="2.3.2 按单个字段排序"></a>2.3.2 按单个字段排序</h4><pre class=" language-mysql"><code class="language-mysql">SELECT    * FROM    employees ORDER BY    salary DESC;</code></pre><h4 id="2-3-3-添加筛选条件再排序"><a href="#2-3-3-添加筛选条件再排序" class="headerlink" title="2.3.3 添加筛选条件再排序"></a>2.3.3 添加筛选条件再排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询部门编号>=90的员工信息，并按员工编号降序SELECT    * FROM    employees WHERE    department_id >= 90 ORDER BY    employee_id DESC;</code></pre><h4 id="2-3-4-按表达式排序"><a href="#2-3-4-按表达式排序" class="headerlink" title="2.3.4 按表达式排序"></a>2.3.4 按表达式排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息 按年薪降序SELECT    *,    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) FROM    employees ORDER BY    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) DESC;</code></pre><h4 id="2-3-5-按别名排序"><a href="#2-3-5-按别名排序" class="headerlink" title="2.3.5 按别名排序"></a>2.3.5 按别名排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息 按年薪升序SELECT    *,    salary * 12 * ( 1+ IFNULL( commission_pct, 0 ) ) 年薪 FROM    employees ORDER BY    年薪 ASC;</code></pre><h4 id="2-3-6-按函数排序"><a href="#2-3-6-按函数排序" class="headerlink" title="2.3.6 按函数排序"></a>2.3.6 按函数排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工名，并且按名字的长度降序SELECT    LENGTH( last_name ),    last_name FROM    employees ORDER BY    LENGTH( last_name ) DESC;</code></pre><h4 id="2-3-7-按多个字段排序"><a href="#2-3-7-按多个字段排序" class="headerlink" title="2.3.7 按多个字段排序"></a>2.3.7 按多个字段排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工信息，要求先按工资降序，再按employee_id升序SELECT    * FROM    employees ORDER BY    salary DESC,    employee_id ASC;</code></pre><h3 id="2-4-常见函数"><a href="#2-4-常见函数" class="headerlink" title="2.4 常见函数"></a>2.4 常见函数</h3><h4 id="2-4-1-概述"><a href="#2-4-1-概述" class="headerlink" title="2.4.1 概述"></a>2.4.1 概述</h4><p><strong>功能</strong>：类似于java中的方法<br><strong>好处</strong>：</p><ul><li>隐藏了实现细节  </li><li>提高代码的重用性</li></ul><p><strong>调用</strong>：select 函数名(实参列表) 【from 表】<br><strong>特点：</strong></p><ul><li>叫什么（函数名）</li><li>干什么（函数功能）</li></ul><p><strong>分类</strong></p><ul><li>单行函数<ul><li>字符函数<br>length:获取字节个数(utf-8一个汉字代表3个字节,gbk为2个字节)、concat、substr、     instr、trim、upper、lower、lpad、rpad、replace</li><li>数学函数<br>round、ceil、floor、truncate、mod</li><li>日期函数：<br>now、curdate、curtime、year、month、monthname、day、hour、minute、   second、str_to_date、date_format</li><li>其他函数：<br>version、database、user</li><li>控制函数<br>if、case</li></ul></li><li>分组函数<br>功能：做统计使用，又称为统计函数、聚合函数、组函数</li></ul><h4 id="2-4-2-字符函数"><a href="#2-4-2-字符函数" class="headerlink" title="2.4.2 字符函数"></a>2.4.2 字符函数</h4><p>length 获取参数值的字节个数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LENGTH( 'john' );#4SELECT    LENGTH( '张三丰hahaha' );#15</code></pre><p>concat 拼接字符串</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CONCAT( last_name, '_', first_name ) 姓名 FROM    employees;</code></pre><p>upper、lower</p><pre class=" language-mysql"><code class="language-mysql">SELECT    UPPER( 'john' );SELECT    LOWER( 'joHn' );    #示例：将姓变大写，名变小写，然后拼接SELECT CONCAT(UPPER(last_name),LOWER(first_name))  姓名 FROM employees;</code></pre><p>substr、substring</p><pre class=" language-mysql"><code class="language-mysql">#注意：索引从1开始#截取从指定索引处后面所有字符SELECT    SUBSTR( '李莫愁爱上了陆展元', 7 ) out_put;#截取从指定索引处指定字符长度的字符SELECT    SUBSTR( '李莫愁爱上了陆展元', 1, 3 ) out_put;#案例：姓名中首字符大写，其他字符小写然后用_拼接，显示出来SELECT    CONCAT( UPPER( SUBSTR( last_name, 1, 1 ) ), '_', LOWER( SUBSTR( last_name, 2 ) ) ) out_put FROM    employees;</code></pre><p> instr 返回子串第一次出现的索引，如果找不到返回0</p><pre class=" language-mysql"><code class="language-mysql">SELECT    INSTR( '杨不殷六侠悔爱上了殷六侠', '殷八侠' ) AS out_put;</code></pre><p>trim</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LENGTH( TRIM( '    张翠山    ' ) ) AS out_put;SELECT    TRIM( 'aa' FROM 'aaaaaaaaa张aaaaaaaaaaaa翠山aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' ) AS out_put;</code></pre><p> lpad 用指定的字符实现左填充指定长度</p><pre class=" language-mysql"><code class="language-mysql">SELECT    LPAD( '殷素素', 2, '*' ) AS out_put;#殷素</code></pre><p> rpad 用指定的字符实现右填充指定长度</p><pre class=" language-mysql"><code class="language-mysql">SELECT    RPAD( '殷素素', 12, 'ab' ) AS out_put;#殷素素ababababa</code></pre><p> replace 替换</p><pre class=" language-mysql"><code class="language-mysql">SELECT REPLACE    ( '周芷若周芷若周芷若周芷若张无忌爱上了周芷若', '周芷若', '赵敏' ) AS out_put;#赵敏赵敏赵敏赵敏张无忌爱上了赵敏</code></pre><h4 id="2-4-3-数学函数"><a href="#2-4-3-数学函数" class="headerlink" title="2.4.3 数学函数"></a>2.4.3 数学函数</h4><p>round 四舍五入</p><pre class=" language-mysql"><code class="language-mysql">SELECT    ROUND( - 1.55 );#-2    SELECT    ROUND( 1.567, 2 );#1.57</code></pre><p>ceil 向上取整,返回&gt;=该参数的最小整数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CEIL( - 1.02 );#-1</code></pre><p>floor 向下取整，返回&lt;=该参数的最大整数</p><pre class=" language-mysql"><code class="language-mysql">SELECT    FLOOR( - 9.99 );#-10</code></pre><p>truncate 截断</p><pre class=" language-mysql"><code class="language-mysql">SELECT TRUNCATE    ( 1.69999, 1 );#1.6</code></pre><p>mod取余</p><pre class=" language-mysql"><code class="language-mysql">SELECT MOD    ( 10,- 3 );#1    SELECT    - 10 % 3;#-1</code></pre><h4 id="2-4-4-日期函数"><a href="#2-4-4-日期函数" class="headerlink" title="2.4.4 日期函数"></a>2.4.4 日期函数</h4><p>now 返回当前系统日期+时间</p><pre class=" language-mysql"><code class="language-mysql">SELECT    NOW( );</code></pre><p>curdate 返回当前系统日期，不包含时间</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CURDATE( );</code></pre><p>curtime 返回当前时间，不包含日期</p><pre class=" language-mysql"><code class="language-mysql">SELECT    CURTIME( );</code></pre><p>获取指定的部分，年、月、日、小时、分钟、秒</p><pre class=" language-mysql"><code class="language-mysql">SELECT YEAR    ( NOW( ) ) 年;    SELECT YEAR    ( '1998-1-1' ) 年;SELECT MONTH    ( NOW( ) ) 月;    SELECT    MONTHNAME( NOW( ) ) 月;</code></pre><p>str_to_date 将字符通过指定的格式转换成日期</p><pre class=" language-mysql"><code class="language-mysql">SELECT    STR_TO_DATE( '1998-3-2', '%Y-%c-%d' ) AS out_put;#1998-03-02;SELECT    * FROM    employees WHERE    hiredate = STR_TO_DATE( '4-3 1992', '%c-%d %Y' );</code></pre><p>date_format 将日期转换成字符</p><pre class=" language-mysql"><code class="language-mysql">SELECT    DATE_FORMAT( NOW( ), '%y年%m月%d日' ) AS out_put;</code></pre><h4 id="2-4-5-其他函数"><a href="#2-4-5-其他函数" class="headerlink" title="2.4.5 其他函数"></a>2.4.5 其他函数</h4><pre class=" language-mysql"><code class="language-mysql">SELECT VERSION();SELECT DATABASE();SELECT USER();</code></pre><h4 id="2-4-6-流程控制函数"><a href="#2-4-6-流程控制函数" class="headerlink" title="2.4.6 流程控制函数"></a>2.4.6 流程控制函数</h4><pre class=" language-mysql"><code class="language-mysql">#1.if函数： if else 的效果SELECTIF    ( 10 < 5, '大', '小' );SELECT    last_name,    commission_pct,IF    ( commission_pct IS NULL, '没奖金，呵呵', '有奖金，嘻嘻' ) 备注 FROM    employees;    #案例：查询员工的工资的情况#如果工资>20000,显示A级别#如果工资>15000,显示B级别#如果工资>10000，显示C级别#否则，显示D级别SELECT salary,CASE WHEN salary>20000 THEN 'A'WHEN salary>15000 THEN 'B'WHEN salary>10000 THEN 'C'ELSE 'D'END AS 工资级别FROM employees;/*案例：查询员工的工资，要求部门号=30，显示的工资为1.1倍部门号=40，显示的工资为1.2倍部门号=50，显示的工资为1.3倍其他部门，显示的工资为原工资*/SELECT salary 原始工资,department_id,CASE department_idWHEN 30 THEN salary*1.1WHEN 40 THEN salary*1.2WHEN 50 THEN salary*1.3ELSE salaryEND AS 新工资FROM employees;</code></pre><h4 id="2-4-7-分组函数"><a href="#2-4-7-分组函数" class="headerlink" title="2.4.7 分组函数"></a>2.4.7 分组函数</h4><ul><li>功能：用作统计使用，又称为聚合函数或统计函数或组函数</li><li>分类：<br>sum 求和、avg 平均值、max 最大值 、min 最小值 、count 计算个数</li><li>特点：<ul><li>sum、avg一般用于处理数值型</li><li>max、min、count可以处理任何类型</li><li>以上分组函数都忽略null值</li><li>可以和distinct搭配实现去重的运算</li><li>count函数的单独介绍<br>一般使用count(*)用作统计行数</li><li>和分组函数一同查询的字段要求是group by后的字段</li></ul></li></ul><p>简单 的使用</p><pre class=" language-mysql"><code class="language-mysql">#1、简单 的使用SELECT    SUM( salary ) FROM    employees;    SELECT    AVG( salary ) FROM    employees;    SELECT    MIN( salary ) FROM    employees;    SELECT    MAX( salary ) FROM    employees;    SELECT    COUNT( salary ) FROM    employees;    SELECT    SUM( salary ) 和,    AVG( salary ) 平均,    MAX( salary ) 最高,    MIN( salary ) 最低,    COUNT( salary ) 个数 FROM    employees;    SELECT    SUM( salary ) 和,    ROUND( AVG( salary ), 2 ) 平均,    MAX( salary ) 最高,    MIN( salary ) 最低,    COUNT( salary ) 个数 FROM    employees;</code></pre><p>参数支持哪些类型</p><pre class=" language-mysql"><code class="language-mysql">#2、参数支持哪些类型SELECT    SUM( last_name ),    AVG( last_name ) FROM    employees;    SELECT    SUM( hiredate ),    AVG( hiredate ) FROM    employees;    SELECT    MAX( last_name ),    MIN( last_name ) FROM    employees;    SELECT    MAX( hiredate ),    MIN( hiredate ) FROM    employees;    SELECT    COUNT( commission_pct ) FROM    employees;    SELECT    COUNT( last_name ) FROM    employees;</code></pre><p>是否忽略null（忽略）</p><pre class=" language-mysql"><code class="language-mysql">SELECT    SUM( commission_pct ),    AVG( commission_pct ),    SUM( commission_pct ) / 35,    SUM( commission_pct ) / 107 FROM    employees;    SELECT    MAX( commission_pct ),    MIN( commission_pct ) FROM    employees;SELECT    COUNT( commission_pct ) FROM    employees;    SELECT    commission_pct FROM    employees;</code></pre><p>和distinct搭配</p><pre class=" language-mysql"><code class="language-mysql">SELECT    SUM( DISTINCT salary ),    SUM( salary ) FROM    employees;    SELECT    COUNT( DISTINCT salary ),    COUNT( salary ) FROM    employees;</code></pre><p>count函数的详细介绍</p><pre class=" language-mysql"><code class="language-mysql">SELECT    COUNT( salary ) FROM    employees;    SELECT    COUNT( * ) FROM    employees;    SELECT    COUNT( 1 ) FROM    employees;/*效率：MYISAM存储引擎下  ，COUNT(*)的效率高INNODB存储引擎下，COUNT(*)和COUNT(1)的效率差不多，比COUNT(字段)要高一些*/</code></pre><p>和分组函数一同查询的字段有限制</p><pre class=" language-mysql"><code class="language-mysql">SELECT    AVG( salary ),    employee_id FROM    employees;</code></pre><h3 id="2-5-分组查询"><a href="#2-5-分组查询" class="headerlink" title="2.5 分组查询"></a>2.5 分组查询</h3><h4 id="2-5-1-概述"><a href="#2-5-1-概述" class="headerlink" title="2.5.1 概述"></a>2.5.1 概述</h4><ul><li><p><strong>语法：</strong><br>select 查询列表<br>from 表<br>【where 筛选条件】<br>group by 分组的字段<br>【order by 排序的字段】;</p></li><li><p><strong>特点：</strong></p><ul><li><p>和分组函数一同查询的字段必须是group by后出现的字段</p></li><li><p>筛选分为两类：分组前筛选和分组后筛选</p></li><li><table><thead><tr><th></th><th>针对的表</th><th>位置</th><th>连接的关键字</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td>group by前</td><td>where</td></tr><tr><td>分组后筛选</td><td>group by后的结果集</td><td>group by后</td><td>group by后  having</td></tr></tbody></table></li><li><p>分组函数做筛选不能放在where后面</p></li><li><p>where——group by——having<br> 一般来讲，能用分组前筛选的，尽量使用分组前筛选，提高效率</p></li><li><p>分组可以按单个字段也可以按多个字段</p></li><li><p>可以搭配着排序使用</p></li></ul></li></ul><h4 id="2-5-2-简单分组"><a href="#2-5-2-简单分组" class="headerlink" title="2.5.2 简单分组"></a>2.5.2 简单分组</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询每个工种的员工平均工资SELECT    AVG( salary ),    job_id FROM    employees GROUP BY    job_id;#案例2：查询每个位置的部门个数SELECT    COUNT( * ),    location_id FROM    departments GROUP BY    location_id;</code></pre><h4 id="2-5-3-分组前的筛选"><a href="#2-5-3-分组前的筛选" class="headerlink" title="2.5.3 分组前的筛选"></a>2.5.3 分组前的筛选</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询邮箱中包含a字符的 每个部门的最高工资SELECT    MAX( salary ),    department_id FROM    employees WHERE    email LIKE '%a%' GROUP BY    department_id;#案例2：查询有奖金的每个领导手下员工的平均工资SELECT    AVG( salary ),    manager_id FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    manager_id;</code></pre><h4 id="2-5-4-分组后筛选"><a href="#2-5-4-分组后筛选" class="headerlink" title="2.5.4 分组后筛选"></a>2.5.4 分组后筛选</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询哪个部门的员工个数>5#①查询每个部门的员工个数SELECT    COUNT( * ),    department_id FROM    employees GROUP BY    department_id;#② 筛选刚才①结果SELECT    COUNT( * ),    department_id FROM    employees GROUP BY    department_id HAVING    COUNT( * ) > 5;#案例2：每个工种有奖金的员工的最高工资>12000的工种编号和最高工资SELECT    job_id,    MAX( salary ) FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    job_id HAVING    MAX( salary ) > 12000;#案例3：领导编号>102的每个领导手下的最低工资大于5000的领导编号和最低工资SELECT    manager_id,    MIN( salary ) FROM    employees GROUP BY    manager_id HAVING    MIN( salary ) > 5000;</code></pre><h4 id="2-5-5-添加排序"><a href="#2-5-5-添加排序" class="headerlink" title="2.5.5 添加排序"></a>2.5.5 添加排序</h4><pre class=" language-mysql"><code class="language-mysql">#案例：每个工种有奖金的员工的最高工资>6000的工种编号和最高工资,按最高工资升序SELECT    job_id,    MAX( salary ) m FROM    employees WHERE    commission_pct IS NOT NULL GROUP BY    job_id HAVING    m > 6000 ORDER BY    m;</code></pre><h4 id="2-5-6-按多个字段分组"><a href="#2-5-6-按多个字段分组" class="headerlink" title="2.5.6 按多个字段分组"></a>2.5.6 按多个字段分组</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个工种每个部门的最低工资,并按最低工资降序SELECT    MIN( salary ),    job_id,    department_id FROM    employees GROUP BY    department_id,    job_id ORDER BY    MIN( salary ) DESC;</code></pre><h3 id="2-6-连接查询"><a href="#2-6-连接查询" class="headerlink" title="2.6 连接查询"></a>2.6 连接查询</h3><h4 id="2-6-1-概述"><a href="#2-6-1-概述" class="headerlink" title="2.6.1 概述"></a>2.6.1 概述</h4><ul><li><strong>含义</strong>：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</li><li><strong>笛卡尔乘积现象</strong>：表1 有m行，表2有n行，结果=m*n行。当查询多个表时，没有添加        有效的连接条件，导致多个表所有行实现完全连接<ul><li>发生原因：没有有效的连接条件</li><li>如何避免：添加有效的连接条件</li></ul></li><li><strong>分类</strong>：<ul><li><strong>按年代分类：</strong><ul><li>sql92标准:仅仅支持内连接</li><li>sql99标准【推荐】：支持内连接+外连接（左外和右外）+交叉连接</li></ul></li><li><strong>按功能分类</strong>：<ul><li>内连接：等值连接、非等值连接、自连接</li><li>外连接：左外连接、右外连接、全外连接、交叉连接</li></ul></li><li><strong>等值连接（sql92）</strong><br>  多表连接的结果为多表的交集部分<br>  n表连接，至少需要n-1个连接条件<br>  多表的顺序没有要求<br>  一般需要为表起别名<br> 可以搭配前面介绍的所有子句进行搭配使用</li></ul></li></ul><h4 id="2-6-2-sql92标准—等值连接"><a href="#2-6-2-sql92标准—等值连接" class="headerlink" title="2.6.2 sql92标准—等值连接"></a>2.6.2 sql92标准—等值连接</h4><ol><li>多表等值连接的结果为多表的交集部分</li><li>n表连接，至少需要n-1个连接条件</li><li> 多表的顺序没有要求</li><li>一般需要为表起别名</li><li>可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</li></ol><pre class=" language-mysql"><code class="language-mysql">#案例1：查询女神名和对应的男神名SELECT NAME    ,    boyName FROM    boys,    beauty WHERE    beauty.boyfriend_id = boys.id;#案例2：查询员工名和对应的部门名SELECT    last_name,    department_name FROM    employees,    departments WHERE    employees.`department_id` = departments.`department_id`;</code></pre><p><strong>为表起别名</strong></p><ol><li>提高语句的简洁度</li><li>区分多个重名的字段</li></ol><p>注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定     </p><pre class=" language-mysql"><code class="language-mysql">#查询员工名、工种号、工种名SELECT    e.last_name,    e.job_id,    j.job_title FROM    employees e,    jobs j WHERE    e.`job_id` = j.`job_id`;</code></pre><p><strong>两个表的顺序是否可以调换</strong></p><pre class=" language-mysql"><code class="language-mysql">#查询员工名、工种号、工种名SELECT    e.last_name,    e.job_id,    j.job_title FROM    jobs j,    employees e WHERE    e.`job_id` = j.`job_id`;</code></pre><p><strong>可以加筛选</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询有奖金的员工名、部门名SELECT    last_name,    department_name,    commission_pct FROM    employees e,    departments d WHERE    e.`department_id` = d.`department_id`     AND e.`commission_pct` IS NOT NULL;#案例2：查询城市名中第二个字符为o的部门名和城市名SELECT    department_name,    city FROM    departments d,    locations l WHERE    d.`location_id` = l.`location_id`     AND city LIKE '_o%';</code></pre><p><strong>可以加分组</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询每个城市的部门个数SELECT    COUNT( * ) 个数,    city FROM    departments d,    locations l WHERE    d.`location_id` = l.`location_id` GROUP BY    city;#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资SELECT    department_name,    d.`manager_id`,    MIN( salary ) FROM    departments d,    employees e WHERE    d.`department_id` = e.`department_id`     AND commission_pct IS NOT NULL GROUP BY    department_name,    d.`manager_id`;</code></pre><p><strong>可以加排序</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序SELECT    job_title,    COUNT( * ) FROM    employees e,    jobs j WHERE    e.`job_id` = j.`job_id` GROUP BY    job_title ORDER BY    COUNT( * ) DESC;</code></pre><p><strong>可以实现三表连接</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询员工名、部门名和所在的城市SELECT    last_name,    department_name,    city FROM    employees e,    departments d,    locations l WHERE    e.`department_id` = d.`department_id`     AND d.`location_id` = l.`location_id`     AND city LIKE 's%' ORDER BY    department_name DESC;</code></pre><h4 id="2-6-3-sql92标准—非等值连接"><a href="#2-6-3-sql92标准—非等值连接" class="headerlink" title="2.6.3 sql92标准—非等值连接"></a>2.6.3 sql92标准—非等值连接</h4><pre class=" language-mysql"><code class="language-mysql">#案例1：查询员工的工资和工资级别SELECT    salary,    grade_level FROM    employees e,    job_grades g WHERE    salary BETWEEN g.`lowest_sal`     AND g.`highest_sal`     AND g.`grade_level` = 'A';</code></pre><h4 id="2-6-4-sql92标准—自连接"><a href="#2-6-4-sql92标准—自连接" class="headerlink" title="2.6.4 sql92标准—自连接"></a>2.6.4 sql92标准—自连接</h4><pre class=" language-mysql"><code class="language-mysql">#案例：查询 员工名和上级的名称SELECT    e.employee_id,    e.last_name,    m.employee_id,    m.last_name FROM    employees e,    employees m WHERE    e.`manager_id` = m.`employee_id`;</code></pre><h4 id="2-6-5-sql99标准—等值连接"><a href="#2-6-5-sql99标准—等值连接" class="headerlink" title="2.6.5 sql99标准—等值连接"></a>2.6.5 sql99标准—等值连接</h4><p><strong>1. 语法：</strong><br>    select 查询列表<br>    from 表1 别名 【连接类型】<br>    join 表2 别名<br>    on 连接条件<br>    【where 筛选条件】<br>    【group by 分组】<br>    【having 筛选条件】<br>    【order by 排序列表】<br><strong>2. 分类：</strong><br>    <strong>内连接（★）</strong>：inner<br>    <strong>语法：</strong><br>            select 查询列表<br>            from 表1 别名<br>            inner join 表2 别名<br>            on 连接条件;<br>            分类：<br>                等值<br>                非等值<br>                自连接<br>            <strong>特点：</strong><br>                ①添加排序、分组、筛选<br>                ②inner可以省略<br>                ③ 筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读<br>                ④inner join连接和sql92语法中的等值连接效果是一样的，都是查询多表的交集<br>   <strong>外连接</strong><br>         左外(★):left 【outer】<br>         右外(★)：right 【outer】<br>         全外：full【outer】<br>   交叉连接：cross<br>#sql92和 sql99pk<br>功能：sql99支持的较多<br>可读性：sql99实现连接条件和筛选条件的分离，可读性较高</p><pre class=" language-mysql"><code class="language-mysql">#1、等值连接#案例1.查询员工名、部门名SELECT    last_name,    department_name FROM    departments d    JOIN employees e ON e.`department_id` = d.`department_id`;#案例2.查询名字中包含e的员工名和工种名（添加筛选）SELECT    last_name,    job_title FROM    employees e    INNER JOIN jobs j ON e.`job_id` = j.`job_id` WHERE    e.`last_name` LIKE '%e%';#3. 查询部门个数>3的城市名和部门个数，（添加分组+筛选）#①查询每个城市的部门个数#②在①结果上筛选满足条件的SELECT    city,    COUNT( * ) 部门个数 FROM    departments d    INNER JOIN locations l ON d.`location_id` = l.`location_id` GROUP BY    city HAVING    COUNT( * ) > 3;#案例4.查询哪个部门的员工个数>3的部门名和员工个数，并按个数降序（添加排序）#①查询每个部门的员工个数SELECT    COUNT( * ),    department_name FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id` GROUP BY    department_name#② 在①结果上筛选员工个数>3的记录，并排序SELECT    COUNT( * ) 个数,    department_name FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id` GROUP BY    department_name HAVING    COUNT( * ) > 3 ORDER BY    COUNT( * ) DESC;#5.查询员工名、部门名、工种名，并按部门名降序（添加三表连接）SELECT    last_name,    department_name,    job_title FROM    employees e    INNER JOIN departments d ON e.`department_id` = d.`department_id`    INNER JOIN jobs j ON e.`job_id` = j.`job_id` ORDER BY    department_name DESC;</code></pre><h4 id="2-6-6-sql99标准—非等值连接"><a href="#2-6-6-sql99标准—非等值连接" class="headerlink" title="2.6.6 sql99标准—非等值连接"></a>2.6.6 sql99标准—非等值连接</h4><pre class=" language-mysql"><code class="language-mysql">#二）非等值连接#查询员工的工资级别SELECT    salary,    grade_level FROM    employees e    JOIN job_grades g ON e.`salary` BETWEEN g.`lowest_sal`     AND g.`highest_sal`; #查询工资级别的个数>20的个数，并且按工资级别降序SELECT    COUNT( * ),    grade_level FROM    employees e    JOIN job_grades g ON e.`salary` BETWEEN g.`lowest_sal`     AND g.`highest_sal` GROUP BY    grade_level HAVING    COUNT( * ) > 20 ORDER BY    grade_level DESC;</code></pre><h4 id="2-6-7-sql99标准—自连接"><a href="#2-6-7-sql99标准—自连接" class="headerlink" title="2.6.7 sql99标准—自连接"></a>2.6.7 sql99标准—自连接</h4><pre class=" language-mysql"><code class="language-mysql"> #查询员工的名字、上级的名字SELECT    e.last_name,    m.last_name FROM    employees e    JOIN employees m ON e.`manager_id` = m.`employee_id`;  #查询姓名中包含字符k的员工的名字、上级的名字SELECT    e.last_name,    m.last_name FROM    employees e    JOIN employees m ON e.`manager_id` = m.`employee_id` WHERE    e.`last_name` LIKE '%k%';</code></pre><h4 id="2-6-8-sql99标准—外连接"><a href="#2-6-8-sql99标准—外连接" class="headerlink" title="2.6.8 sql99标准—外连接"></a>2.6.8 sql99标准—外连接</h4><p><strong>应用场景：</strong>用于查询一个表中有，另一个表没有的记录</p><p><strong>特点：</strong></p><ol><li>外连接的查询结果为主表中的所有记录<br>如果从表中有和它匹配的，则显示匹配的值<br>如果从表中没有和它匹配的，则显示null<br>外连接查询结果=内连接结果+主表中有而从表没有的记录</li><li>左外连接，left join左边的是主表</li><li>右外连接，right join右边的是主表</li><li>左外和右外交换两个表的顺序，可以实现同样的效果 </li><li>全外连接=内连接的结果+表1中有但表2没有的+表2中有但表1没有的</li></ol><pre class=" language-mysql"><code class="language-mysql"> #左外连接SELECT    b.*,    bo.* FROM    boys bo    LEFT OUTER JOIN beauty b ON b.`boyfriend_id` = bo.`id` WHERE    b.`id` IS NULL;  #案例1：查询哪个部门没有员工#左外SELECT    d.*,    e.employee_id FROM    departments d    LEFT OUTER JOIN employees e ON d.`department_id` = e.`department_id` WHERE    e.`employee_id` IS NULL;  #右外SELECT    d.*,    e.employee_id FROM    employees e    RIGHT OUTER JOIN departments d ON d.`department_id` = e.`department_id` WHERE    e.`employee_id` IS NULL;   #全外USE girls;SELECT    b.*,    bo.* FROM    beauty b    FULL OUTER JOIN boys bo ON b.`boyfriend_id` = bo.id; #交叉连接SELECT    b.*,    bo.* FROM    beauty b    CROSS JOIN boys bo;</code></pre><h3 id="2-7-子查询"><a href="#2-7-子查询" class="headerlink" title="2.7 子查询"></a>2.7 子查询</h3><h4 id="2-7-1-概述"><a href="#2-7-1-概述" class="headerlink" title="2.7.1 概述"></a>2.7.1 概述</h4><p><strong>1. 含义</strong>：出现在其他语句中的select语句，称为子查询或内查询。外部的查询语句，称为主查询或外查询。外面的语句可以是insert、update、delete、select等，一般select作为外面语句较多，外面如果为select语句，则此语句称为外查询或主查询。</p><p><strong>2. 分类</strong>：</p><ul><li><strong>按子查询出现的位置</strong>：<br>  <strong>select后面</strong>：仅仅支持标量子查询<br>  <strong>from后面</strong>：支持表子查询<br>  <strong>where或having后面</strong>：★<br>  标量子查询（单行） √<br>  列子查询  （多行） √<br>   行子查询<br>   <strong>exists后面</strong>（相关子查询）<br>   标量子查询<br>  列子查询<br>  行子查询<br>  表子查询</li><li><strong>按结果集的行列数不同</strong>：<br> 标量子查询（结果集只有一行一列）<br> 列子查询（结果集只有一列多行）<br> 行子查询（结果集有一行多列）<br> 表子查询（结果集一般为多行多列）</li><li><strong>特点：</strong><br>①子查询放在小括号内<br>②子查询一般放在条件的右侧<br>③标量子查询，一般搭配着单行操作符使用 &gt; &lt; &gt;= &lt;= = &lt;&gt;<br> 列子查询，一般搭配着多行操作符使用<br> in（任意一个）、any/some(某一个)、all（所有）<br>④子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li></ul><h4 id="2-7-2-where或having后面"><a href="#2-7-2-where或having后面" class="headerlink" title="2.7.2   where或having后面"></a>2.7.2   where或having后面</h4><ul><li>标量子查询（单行子查询）</li><li>列子查询（多行子查询）</li><li>行子查询（多列多行）</li></ul><p><strong>特点：</strong></p><ol><li>子查询放在小括号内</li><li>子查询一般放在条件的右侧</li><li>标量子查询，一般搭配着单行操作符使用 &gt; &lt; &gt;= &lt;= = &lt;&gt;<br> 列子查询，一般搭配着多行操作符使用in、any/some、all</li><li>子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</li></ol><p> <strong>标量子查询</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：谁的工资比 Abel 高?#①查询Abel的工资SELECT    salary FROM    employees WHERE    last_name = 'Abel'#②查询员工的信息，满足 salary>①结果SELECT    * FROM    employees WHERE    salary > ( SELECT salary FROM employees WHERE last_name = 'Abel' );#案例2：返回job_id与141号员工相同，salary比143号员工多的员工 姓名，job_id 和工资#①查询141号员工的job_idSELECT    job_id FROM    employees WHERE    employee_id = 141#②查询143号员工的salarySELECT    salary FROM    employees WHERE    employee_id = 143#③查询员工的姓名，job_id 和工资，要求job_id=①并且salary>②SELECT    last_name,    job_id,    salary FROM    employees WHERE    job_id = ( SELECT job_id FROM employees WHERE employee_id = 141 )     AND salary > ( SELECT salary FROM employees WHERE employee_id = 143 );#案例3：返回公司工资最少的员工的last_name,job_id和salary#①查询公司的 最低工资SELECT    MIN( salary ) FROM    employees#②查询last_name,job_id和salary，要求salary=①SELECT    last_name,    job_id,    salary FROM    employees WHERE    salary = ( SELECT MIN( salary ) FROM employees );#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资#①查询50号部门的最低工资SELECT    MIN( salary ) FROM    employees WHERE    department_id = 50#②查询每个部门的最低工资SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id#③ 在②基础上筛选，满足min(salary)>①SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id HAVING    MIN( salary ) > ( SELECT MIN( salary ) FROM employees WHERE department_id = 50 );#非法使用标量子查询SELECT    MIN( salary ),    department_id FROM    employees GROUP BY    department_id HAVING    MIN( salary ) > ( SELECT salary FROM employees WHERE department_id = 250 );</code></pre><p><strong>列子查询（多行子查询）</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例1：返回location_id是1400或1700的部门中的所有员工姓名#①查询location_id是1400或1700的部门编号SELECT DISTINCT    department_id FROM    departments WHERE    location_id IN ( 1400, 1700 )#②查询员工姓名，要求部门号是①列表中的某一个SELECT    last_name FROM    employees WHERE    department_id <> ALL ( SELECT DISTINCT department_id FROM departments WHERE location_id IN ( 1400, 1700 ) );#案例2：返回其它工种中比job_id为‘IT_PROG’工种任一工资低的员工的员工号、姓名、job_id 以及salary#①查询job_id为‘IT_PROG’部门任一工资SELECT DISTINCT    salary FROM    employees WHERE    job_id = 'IT_PROG'#②查询员工号、姓名、job_id 以及salary，salary<(①)的任意一个SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ANY ( SELECT DISTINCT salary FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#或SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ( SELECT MAX( salary ) FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#案例3：返回其它部门中比job_id为‘IT_PROG’部门所有工资都低的员工   的员工号、姓名、job_id 以及salarySELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ALL ( SELECT DISTINCT salary FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';#或SELECT    last_name,    employee_id,    job_id,    salary FROM    employees WHERE    salary < ( SELECT MIN( salary ) FROM employees WHERE job_id = 'IT_PROG' )     AND job_id <> 'IT_PROG';</code></pre><p><strong>行子查询（结果集一行多列或多行多列）</strong></p><pre class=" language-mysql"><code class="language-mysql">#3、行子查询（结果集一行多列或多行多列）#案例：查询员工编号最小并且工资最高的员工信息SELECT    * FROM    employees WHERE    ( employee_id, salary ) = ( SELECT MIN( employee_id ), MAX( salary ) FROM employees );#①查询最小的员工编号SELECT    MIN( employee_id ) FROM    employees#②查询最高工资SELECT    MAX( salary ) FROM    employees#③查询员工信息SELECT    * FROM    employees WHERE    employee_id = ( SELECT MIN( employee_id ) FROM employees )     AND salary = ( SELECT MAX( salary ) FROM employees );</code></pre><h4 id="2-7-3-select后面"><a href="#2-7-3-select后面" class="headerlink" title="2.7.3 select后面"></a>2.7.3 select后面</h4><p><strong>仅仅支持标量子查询</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个部门的员工个数SELECT    d.*,    ( SELECT COUNT( * ) FROM employees e WHERE e.department_id = d.`department_id` ) 个数 FROM    departments d;  #案例2：查询员工号=102的部门名SELECT    (SELECT    department_name,    e.department_id FROM    departments d    INNER JOIN employees e ON d.department_id = e.department_id WHERE    e.employee_id = 102     ) 部门名;</code></pre><h4 id="2-7-4-from后面"><a href="#2-7-4-from后面" class="headerlink" title="2.7.4 from后面"></a>2.7.4 from后面</h4><p><strong>将子查询结果充当一张表，要求必须起别名</strong></p><pre class=" language-mysql"><code class="language-mysql">#案例：查询每个部门的平均工资的工资等级#①查询每个部门的平均工资SELECT    AVG( salary ),    department_id FROM    employees GROUP BY    department_id#②连接①的结果集和job_grades表，筛选条件平均工资 between lowest_sal and highest_salSELECT    ag_dep.*,    g.`grade_level` FROM    ( SELECT AVG( salary ) ag, department_id FROM employees GROUP BY department_id ) ag_dep    INNER JOIN job_grades g ON ag_dep.ag BETWEEN lowest_sal     AND highest_sal;</code></pre><h4 id="2-7-5-exists后面（相关子查询）"><a href="#2-7-5-exists后面（相关子查询）" class="headerlink" title="2.7.5 exists后面（相关子查询）"></a>2.7.5 exists后面（相关子查询）</h4><p><strong>语法：</strong> exists(完整的查询语句)    结果：1或0</p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询有员工的部门名#inSELECT    department_name FROM    departments d WHERE    d.`department_id` IN ( SELECT department_id FROM employees )#existsSELECT    department_name FROM    departments d WHERE    EXISTS ( SELECT * FROM employees e WHERE d.`department_id` = e.`department_id` );#案例2：查询没有女朋友的男神信息#inSELECT    bo.* FROM    boys bo WHERE    bo.id NOT IN ( SELECT boyfriend_id FROM beauty )#existsSELECT    bo.* FROM    boys bo WHERE    NOT EXISTS ( SELECT boyfriend_id FROM beauty b WHERE bo.`id` = b.`boyfriend_id` );</code></pre><h3 id="2-8-分页查询"><a href="#2-8-分页查询" class="headerlink" title="2.8 分页查询"></a>2.8 分页查询</h3><h4 id="2-8-1-概述"><a href="#2-8-1-概述" class="headerlink" title="2.8.1 概述"></a>2.8.1 概述</h4><p><strong>1. 应用场景</strong>：当要显示的数据，一页显示不全，需要分页提交sql请求<br><strong>2. 语法</strong>：<br>    select 查询列表<br>    from 表<br>    【join type join】 表2<br>    on 连接条件<br>    where 筛选条件<br>    group by 分组字段<br>    having 分组后的筛选<br>    order by 排序的字段】<br>    limit 【offset,】size;</p><p>offset要显示条目的起始索引（起始索引从0开始）<br>size 要显示的条目个数<br><strong>3. 特点</strong>：<br>①limit语句放在查询语句的最后<br>②公式<br>要显示的页数 page，每页的条目数size</p><p>select 查询列表<br>from 表<br>limit (page-1)*size,size;</p><pre class=" language-mysql"><code class="language-mysql">#案例1：查询前五条员工信息SELECT    * FROM    employees     LIMIT 0,    5;        SELECT    * FROM    employees     LIMIT 5;#案例2：查询第11条——第25条SELECT    * FROM    employees     LIMIT 10,    15;#案例3：有奖金的员工信息，并且工资较高的前10名显示出来SELECT    * FROM    employees WHERE    commission_pct IS NOT NULL ORDER BY    salary DESC     LIMIT 10;</code></pre><h3 id="2-8-联合查询"><a href="#2-8-联合查询" class="headerlink" title="2.8 联合查询"></a>2.8 联合查询</h3><h4 id="2-8-1-概述-1"><a href="#2-8-1-概述-1" class="headerlink" title="2.8.1 概述"></a>2.8.1 概述</h4><p><strong>union</strong> 联合 合并：将多条查询语句的结果合并成一个结果<br>语法：<br>查询语句1<br>union<br>查询语句2<br>union<br>…<br><strong>应用场景：</strong><br>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p><p><strong>特点</strong>：★<br>1、要求多条查询语句的查询列数是一致的！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项</p><pre class=" language-mysql"><code class="language-mysql">#引入的案例：查询部门编号>90或邮箱包含a的员工信息SELECT    * FROM    employees WHERE    email LIKE '%a%'     OR department_id > 90;SELECT    * FROM    employees WHERE    email LIKE '%a%';UNIONSELECT    * FROM    employees WHERE    department_id > 90;        #案例：查询中国用户中男性的信息以及外国用户中年男性的用户信息SELECT    id,    cname FROM    t_ca WHERE    csex = '男' UNION ALLSELECT    t_id,    tname FROM    t_ua WHERE    tGender = 'male';</code></pre><h3 id="2-9-查询总结"><a href="#2-9-查询总结" class="headerlink" title="2.9 查询总结"></a>2.9 查询总结</h3><p><strong>语法：</strong><br>select 查询列表    ⑦<br>from 表1 别名       ①<br>连接类型 join 表2   ②<br>on 连接条件         ③<br>where 筛选          ④<br>group by 分组列表   ⑤<br>having 筛选         ⑥<br>order by排序列表    ⑧<br>limit 起始条目索引，条目数;  ⑨</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建(一)   雏形</title>
      <link href="/2021/12/28/blogSetUp/"/>
      <url>/2021/12/28/blogSetUp/</url>
      
        <content type="html"><![CDATA[<p>Hexo+Github Pages搭建博客的前期工作。拥有一个Github账号(Github是代码托管平台)。安装Git(一座通向GitHub的桥梁。我们可以通过git把本地项目上传到GitHub，同时也可以通过git从GitHub上取项目到本地。)；安装Hexo(我们的个人博客网站的框架),安装Node.JS</p><h2 id="一、注册一个Github账号"><a href="#一、注册一个Github账号" class="headerlink" title="一、注册一个Github账号"></a>一、注册一个Github账号</h2><p>  点击<a href="https://github.com/">Github</a>访问Github官网，点击Sign up进行注册，在新的页面输入要求的信息即可<br>   <img src="/2021/12/28/blogSetUp/1.png"></p><h2 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h2><ol><li>点击<a href="https://git-scm.com/downloads">Git官网</a>进入官网，根据自己的电脑环境选择对应的版本。<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">安装教程</a></li><li>按下Win+R输入cmd打开运行窗口，输入<code>git --version </code>测试Git是否安装成功，若出现Git版本信息则安装成功</li><li>配置Git个人信息<ul><li>输入<code>git config --global user.name &quot;name&quot; </code> name=你注册Github时的名字</li><li>输入<code>git config --global user.email  &quot;Email&quot; </code> Email=你注册Github时的邮箱<br><img src="/2021/12/28/blogSetUp/9.png"></li></ul></li></ol><h2 id="三、安装Node-js"><a href="#三、安装Node-js" class="headerlink" title="三、安装Node.js"></a>三、安装Node.js</h2><ol><li>点击<a href="https://nodejs.org/en/download/">nodejs</a>进入官网，按自己电脑的环境选择对应的版本即可。<a href="https://blog.csdn.net/muzidigbig/article/details/80493880">安装教程</a></li><li>按下Win+R输入cmd打开运行窗口，输入<code>node -v</code>，<code>npm -v</code>若出现版本信息则安装成功</li></ol><h2 id="四、安装Hexo"><a href="#四、安装Hexo" class="headerlink" title="四、安装Hexo"></a>四、安装Hexo</h2><ol><li>在你想要存放博客的地方创建一个文件夹，例如F:\Blog</li><li>右键F:\Blog文件夹，点击Git Bash Here</li><li>输入<code>npm install hexo-cli -g</code>安装Hexo<br>   <img src="/2021/12/28/blogSetUp/10.png"></li><li>输入<code>npm install hexo-deployer-git --save </code>安装的Hexo部署到git page的deployer<br>   <img src="/2021/12/28/blogSetUp/11.png"></li></ol><h2 id="五、Hexo初始化配置"><a href="#五、Hexo初始化配置" class="headerlink" title="五、Hexo初始化配置"></a>五、Hexo初始化配置</h2><ol><li>在F:\Blog下新建一个名为Hexo的空文件夹，右键Hexo文件夹，点击Git Bash Here，输入<br><code>hexo init</code></li><li>Hexo文件夹如下所示<br><img src="/2021/12/28/blogSetUp/13.png"></li><li>右键Hexo文件夹，选择Git Bash Here输入<code>hexo g</code>，<code>hexo s</code></li><li>登录 <a href="http://localhost:4000/">http://localhost:4000/</a>，出现下图所示则初始化配置成功<br> <img src="/2021/12/28/blogSetUp/14.png"></li></ol><h2 id="六、创建代码库"><a href="#六、创建代码库" class="headerlink" title="六、创建代码库"></a>六、创建代码库</h2><ol><li>登录Github，点击头像，在下拉列表选择Your repositories进入代码库</li><li>点击右上角的New创建新的代码库<br><img src="/2021/12/28/blogSetUp/2.png"><br><img src="/2021/12/28/blogSetUp/3.png"></li></ol><h2 id="七、配置SSH秘钥"><a href="#七、配置SSH秘钥" class="headerlink" title="七、配置SSH秘钥"></a>七、配置SSH秘钥</h2><ol><li><p>生成SSH秘钥</p><ul><li>在你想要存放博客的地方创建一个文件夹，例如F:\Blog</li><li>右键Blog文件夹，点击Git Bash Here</li><li><code> ssh-keygen -t rsa -C &quot;Email&quot;</code>  Email=你刚才注册Github的邮箱</li><li>之后出现<br><code> Generating public/private rsa key pair.     Enter file in which to save the key (/c/Users/you/.ssh/id_rsa):</code>直接回车</li><li>接下来出现<br> <code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.</code><br>  <code> Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</code><br>  <code>The key fingerprint is:</code><br>   <code> The key&#39;s randomart image is:</code> </li></ul></li><li><p>在Github添加秘钥</p><ul><li>登录Github，右键头像，在下拉框选择Settings</li><li>在页面的左侧菜单选择SSH and GPG keys<br>   <img src="/2021/12/28/blogSetUp/4.png"></li><li>选择New SSH key<br>   <img src="/2021/12/28/blogSetUp/5.png"></li><li>粘贴你的秘钥，秘钥在C:\Users\你的电脑名字.ssh\id_rsa.pub，秘钥为该文件的全部内容。该文件是隐藏文件<br>  <img src="/2021/12/28/blogSetUp/6.png"></li><li>测试，输入<code>ssh -T git@github.com</code>之后若显示<br> <img src="/2021/12/28/blogSetUp/7.png"><br> 输入yes即可，若出现下图所示，表示配置成功<br>   <img src="/2021/12/28/blogSetUp/8.png"></li></ul></li></ol><h2 id="八、将Hexo文件更新到Github中"><a href="#八、将Hexo文件更新到Github中" class="headerlink" title="八、将Hexo文件更新到Github中"></a>八、将Hexo文件更新到Github中</h2><ol><li>登录自己的Github，打开自己刚才建立的仓库，复制地址如下图所示<br>   <img src="/2021/12/28/blogSetUp/15.png"></li><li>修改配置信息<ul><li>打开F:\Blog\Hexo文件的_config.xml</li><li>找到如下所示信息，进行修改<br>type: git          repository: 刚才复制的地址     branch: 见图<br><img src="/2021/12/28/blogSetUp/16.png"> <img src="/2021/12/28/blogSetUp/17.png"><br><font color="#F44336">踩过的坑：</font> branch的值与Github不一致，导致上传至Github失败</li></ul></li><li>测试是否可以部署<ul><li>右键F:\Blog\Hexo，点击Git Bash Here</li><li>输入<code>hexo g </code>，<code>hexo s </code>，<code>hexo g -d</code>，</li><li>若出现下面的情况说明deployer没有安装成功，那我们需要输入<code>npm install hexo-   deployer-git --save </code>再次安装，再输入<code>hexo g -d</code>，若没有则跳过此步骤</li><li>在浏览器输入https://你的用户名.github.io，就会出现创建仓库时的readme内容</li></ul></li></ol><hr><p>参考文章<a href="https://itrhx.blog.csdn.net/article/details/82121420">https://itrhx.blog.csdn.net/article/details/82121420</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
